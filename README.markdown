Quintel Energy Transition Model
===============================

# Branches #

### master ###

Working branch. Please always commit to this branch and rebase from here.

### staging ###

Tracks deployment on the staging/beta server (http://beta.et-model.com)

### production ###

Branch for the production server (http://et-model.com)

# Guides for Developers #

## Building/kickstarting on a new machine ##

* Get Ruby 1.9.2 or higher running. (use rbenv)
* Make sure you have installed on your machine:
  * memcached
* Pull this repository with `git clone git@github.com:dennisschoenmakers/etmodel.git`
* Create your own `database.yml` and `config.yml` from the samples in `config/`
* Run `bundle install`
* Run `memcached -d`
* Run `rake sunspot:solr:run`
* Create local databases for test and development (eg: `etmodel_dev`, `etmodel_test`)
* Get ssh access to staging server (ask Dennis)
* Clone the database from the staging server using `cap staging db2local`

## Deploying ##

To deploy to staging:

    `$: cap staging deploy`

To make capistrano work on production server write *cap prod*:

    `$: cap production deploy`


1. Make sure everything works. Run the tests.

    `(dev)$: rake spec`

2. Commit and push all the changes

    `(dev)$ git push origin dev`

3. Switch to master branch

    `(dev)$ git checkout master`

4.  Merge dev branch

    `(master)$ git merge dev`

5. If merge errors, clean up and commit.

6. Push master branch online

    `(master)$ git push`

7. If you have commited any changes (while in the master branch), merge back into dev

    `(master)$ git checkout dev`
    `(dev)$ git merge master`
    `(dev)$ git checkout master`

8. Now deploy to the *staging* server

    `(master)$ cap staging deploy`
    `(master)$ cap staging deploy:migrations (if migrations exist)`

9. Test *staging*

10. Deploy to the *production* server

    `(master)$ cap prod deploy`
    `etc.`

11. Switch back to dev branch

    `(master)$ gco dev`

# Deployments #

Paolo can write some nice prose here about the deployment procedure and what mighty scripts to use...

# Search

The old thinking sphinx has been replaced with SOLR. Things you should know:

On your local box the gem provides a standalone SOLR instance. You can start it
with:

    rake sunspot:solr:start

On Ubuntu servers you have to install it yourself. Ther fastest way is

    sudo apt-get install solr-tomcat

Start/stop with `sudo service tomcat6 start`. Update the `sunspot.yml` file as
needed. On production SOLR listens on port 8080.

Configuration files: copy the `schema.xml` and `solrconfig.xml` generated by
sunspot in `RAILS_ROOT/solr/conf` to `/etc/solr/conf`.
Check if SOLR is running by opening with lynx `http://localhost:8080/solr`.
If it complains about not being able to write the index directory then create it
yourself manually: `/var/lib/tomcat6/solr/data` and make sure the user SOLR is
running as has write access. It will take care of creatiing an `index` subfolder.
If you get an error about missing `segments` file delete the index folder and
restart SOLR.

Once it is running you can index everything from the console with

    RAILS_ENV=production bundle exec rake sunspot:reindex


## Links
https://github.com/sunspot/sunspot/wiki/Configure-Solr-on-Ubuntu%2C-the-quickest-way
