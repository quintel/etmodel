%h1
  = @converter_present.name
  -#= @converter_present.record_id
%h2== Full Key: #{@converter_present.full_key}
%h4== Sector: #{@converter_present.sector_key}
%h4== Converter: #{@converter_present.key}
%h4== Use: #{@converter_present.use_key}


%table
  %tr
    %th Present
    %th Future
  %tr    
    - [@converter_present, @converter_future].each do |converter|
      %td
        %table{:border => 1}
          %tr
            %th
            %th Carrier
            %th Input
            %th Output

          - converter.slots.each do |slot|
            %tr
              %td= slot.carrier.id
              %td== #{slot.carrier.id} #{slot.carrier.key}
              %td= slot.input? ? slot.conversion : nil
              %td= slot.input? ? nil : slot.conversion

        %h4 Slot
        %table{:border => 1}
          %thead
            %tr
              %th direction
              %th carrier
              %th conversion
              %th external value
          - [converter.inputs, converter.outputs].flatten.each do |slot|
            %tr
              %td= slot.input? ? 'input' : 'output'
              %td= slot.carrier.key
              %td= slot.conversion.andand.round(3) rescue 'error'
              %td= slot.external_value.andand.round(1) rescue 'error'

        %h4 Input Links
        %table{:border => 1}
          - converter.input_links.each do |link|
            %tr
              %td= link.link_type
              %td= link.carrier.key
              %td{:style => "text-align: right"}= number_with_precision link.value, :precision => 0, :delimiter => "'"
              %td
                = link_to link.child.full_key, admin_converter_path(link.child.id, :graph_id => @graph.id, :graph=>params[:graph]), :target => '_blank'
              %td= link.share.andand.round(3) rescue 'error'

        %h4 Output Links
        %table{:border => 1}
          - converter.output_links.each do |link|
            %tr
              %td= link.link_type
              %td= link.carrier.key
              %td{:style => "text-align: right"}= number_with_precision link.value, :precision => 0, :delimiter => "'"
              %td
                = link_to link.parent.full_key, admin_converter_path(link.parent.id, :graph_id => @graph.id, :graph=>params[:graph]), :target => '_blank'
              %td= link.share
              %td= link.value
        %h4 Calculations
        %table{:border => 1}
          %tr
            %td Total Cost Per MWhe
            %td{:style => "text-align: right"}= number_with_precision converter.query.total_cost_per_mje.andand.per_mj_to_per_mwh

          %tr
            %td Total Cost Per MWhe excl CO2 and fuel costs
            %td{:style => "text-align: right"}= number_with_precision converter.query.total_cost_per_mje_excl_co2_and_fuel.andand.per_mj_to_per_mwh



          - Qernel::ConverterApi.calculation_methods.each do |attr_name|
            %tr
              %td= attr_name
              %td{:style => "text-align: right"}= number_with_delimiter converter.query(attr_name), :delimiter => "'"  
          %tr
            %td Preset Demand
            %td{:style => "text-align: right"}= number_with_delimiter converter.preset_demand, :delimiter => "'"  
          %tr
            %td Demand
            %td{:style => "text-align: right"}= number_with_precision converter.query.demand, :delimiter => "'", :precision => 0
          %tr
            %td Demand Fossil
            %td{:style => "text-align: right"}= number_with_precision converter.query.demand_of_fossil, :delimiter => "'", :precision => 0
          %tr
            %td Demand Sustainable
            %td{:style => "text-align: right"}= number_with_precision converter.query.demand_of_sustainable, :delimiter => "'", :precision => 0
          %tr
            %td Percentage sustainable
            %td{:style => "text-align: right"}= number_with_precision converter.query.sustainability_share, :delimiter => "'"  
          %tr
            %td Final Demand
            %td{:style => "text-align: right"}= number_with_precision converter.final_demand, :delimiter => "'", :precision => 0

          %tr
            %td Primary Demand
            %td{:style => "text-align: right"}= number_with_precision converter.primary_demand, :delimiter => "'", :precision => 0

          %tr
            %td Primary Demand Fossil
            %td{:style => "text-align: right"}= number_with_precision converter.primary_demand_of_fossil, :delimiter => "'", :precision => 0
          %tr
            %td Primary Demand Sustainable
            %td{:style => "text-align: right"}= number_with_precision converter.primary_demand_of_sustainable, :delimiter => "'", :precision => 0

          - @qernel_graph.carriers.each do |carrier|
            - if primary_demand = converter.primary_demand_of_carrier(carrier.key.to_sym) and primary_demand > 0.0
              %tr
                %td== Primary Demand of #{carrier.key}
                %td{:style => "text-align: right"}= number_with_precision primary_demand, :delimiter => "'", :precision => 0

          -#%tr
            %td Primary Demand Share
            %td{:style => "text-align: right"}= number_with_delimiter converter.primary_demand_share, :delimiter => "'"  
          %tr
            %td Total Losses
            %td{:style => "text-align: right"}= number_with_delimiter converter.total_losses, :delimiter => "'"  


        %h4 Expected
        %table{:border => 1}
          - Qernel::ConverterApi::ATTRIBUTES_USED.select{|a| a.to_s.include?('expected')}.each do |attr_name|
            %tr
              %td= attr_name
              %td{:style => "text-align: right"}= number_with_delimiter converter.query(attr_name), :delimiter => "'"

        %h4 Attributes
        %table{:border => 1}
          - Qernel::ConverterApi::ATTRIBUTES_USED.reject{|a| a.to_s.include?('expected')}.each do |attr_name|
            %tr
              %td= attr_name
              %td{:style => "text-align: right"}= number_with_delimiter converter.query(attr_name), :delimiter => "'"
