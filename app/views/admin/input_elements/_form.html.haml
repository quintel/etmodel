%div{:style => "width: 60%"}
  = simple_form_for [:admin, @input_element] do |f|
    = f.input :key,
      :hint => "Should be unique and recognizable! It is used as translation key, too. Check for conventions with WvL"
    = f.input :fixed,
      :hint => "When you want to disable a slider, but still show it, this is your friend"
    = f.input :share_group,
      :hint => "Sliders with the same share_group will be connected and sum up to 100%"
    = f.input :interface_group,
      :hint => "Sliders with the same interface_group will be shown as a group inside the slide, divided by a line and sub_header"
    = f.input :step_value, :as => :float, :required => true
    = f.input :unit, :required => true
    .input.float
      %label.text.optional.control-label
        Draw to
      = f.input :draw_to_min, :as => :float, :label => 'Minimum'
      = f.input :draw_to_max, :as => :float, :label => 'Maximum'
      %span.hint
        Set custom minimum and maximum values to which the slider will be
        drawn. Note that  the "draw to" settings will be ignored when higher
        (for the minimum) or lower (for the maximum) than the ETEngine input
        min/max. For example, if the input minimum is 50 and maximum is 100, you
        may choose to set the draw to minimum to 25; this will draw a slider
        which starts at 25 and ends at 100, but the user will not be able to
        select a value below 50.
    = f.input :command_type, :as => :select,
      :collection => ['growth_rate', 'value', 'efficiency_improvement'],
      :hint => "This is used by the backcasting module"
    = f.input :related_converter,
      :hint => 'Optional key of the related converter. Used to show slider info'
    = f.input :comments

    = f.association :slide, :collection => Slide.all.order("`slides`.key ASC").map{|o| [o.key, o.id]}
    = f.input :position

    = f.simple_fields_for :area_dependency do |j|
      = j.input :dependent_on, :as => :select,
        :collection => area_dependency_options(@input_element),
        :hint => "When you dont want to show the input_element for areas which have a certain setting. E.g. dont wanna show Solar CSP in NL? Put this to 'has_solar_csp' and be sure that for NL this value is false in the area data."

    = f.simple_fields_for :description do |j|
      = j.input :content_en, :hint => "Extra info which shows up when the ? icon is clicked can be changed here!"
      = j.input :content_nl
    = f.button :submit

  = link_to "back", admin_input_elements_path
