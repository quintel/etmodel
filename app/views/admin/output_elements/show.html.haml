%h2
  = t "output_elements.#{@output_element.key}"
  (#{@output_element.key})

= link_to 'edit', edit_admin_output_element_path(@output_element)

%h3 Series
%table.default
  %thead
    %tr
      %th.tal id
      %th.tal label
      %th.tal color
      %th Gquery
      %th.tal is_target_line
      %th

  %tbody
    -@output_element.output_element_series.each do |serie|
      %tr{cycles}
        %td= serie.id
        %td= link_to serie.label, admin_output_element_serie_path(serie)
        %td{:style => "background: #{serie.color}"}= color_to_string(serie.color)
        %td= link_to serie.gquery, "#{APP_CONFIG[:gquery_detail_url]}#{serie.gquery}", :class => :external
        %td= serie.is_target_line
        %td
          = link_to 'edit', edit_admin_output_element_serie_path(:id => serie.id)
          |
          = link_to 'delete', admin_output_element_serie_path(:id => serie.id), :method => :delete, :confirm => 'Are you sure?'


%p
  = link_to 'Create new serie', new_admin_output_element_serie_path(:output_element_id => @output_element.id)

#chart_preview
  = content_tag_for :div, @output_element do
    Chart

- content_for :head do
  = stylesheet_link_tag "vendor/jquery.jqplot"
  = javascript_include_tag :defaults, :cache => true
  = render "layouts/etm/javascript_globals"
  = javascript_include_tag 'underscore.min', 'i18n', 'translations'
  = sprocket_layout_init :etm
  :javascript
    App.settings = new Setting(#{Current.setting.to_json.html_safe});
    #{ js_for_output_element(@output_element.id, "output_element_#{@output_element.id}") }
    App.ensure_scenario_id();
    App.call_api();
  
