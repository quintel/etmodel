#arrow_box_households
  = t("intro.section")
#shadowbox-outer{:style => "width: 70%; margin: 0px 0px 40px 25%;"}
  #shadow-bg-n.shadow-bg
  #shadow-bg-ne.shadow-bg
  #shadow-bg-e.shadow-bg
  #shadow-bg-se.shadow-bg
  #shadow-bg-s.shadow-bg
  #shadow-bg-sw.shadow-bg
  #shadow-bg-w.shadow-bg
  #shadow-bg-nw.shadow-bg
  #shadowbox-inner{:style => "padding: 20px 40px 40px 40px;" }
    #shadowbox-content{:style => "width: 100%"}
      #text_wide
        %h1= t("Who uses most energy?")
        %ul#blocks
          -# total = Current.gql.query('present:SUM(V(G(final_demand_cbs);final_demand))')
          -# query = Proc.new{|sector| "present:SUM(V(INTERSECTION(G(final_demand_cbs),SECTOR(#{sector}));final_demand))" }

          - options = Proc.new{|key| {:query => nil, :total => nil, :clickable => Current.view.sidebar_items.map(&:key).include?(key)}}

          - # TODO this does not completely work like before

          - intro_charts_item('Households', 'households', options.call('households')) 
          - if Current.scenario.has_buildings?
            - intro_charts_item('Buildings', 'buildings', options.call('buildings')) 
          - intro_charts_item('Transport', 'transport', options.call('transport'))
          - intro_charts_item('Industry', 'industry', options.call('industry'))
          - intro_charts_item('Agriculture', 'agriculture', options.call('agriculture')) 
          - intro_charts_item('Other', 'other', options.call('other'))
  .clear
#arrow_box_constraints
  = t("intro.results")
