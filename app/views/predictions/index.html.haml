= stylesheet_link_tag 'prediction'
= javascript_include_tag :defaults
= sprocket_include_tag 'backcasting'
:ruby
  colours = ["F00", "0F0", "00F", "FF0", "F0F", "0FF"]
  series = @input_element.predictions.map{|p| p.values_to_a}
  series_options = series.map{|x| {}}
  # To show the vertical bar representing the scenario end year I must add the
  # serie options as the last item.
  # TODO: refactor
  if @end_year && @end_year.to_i != 2050
    series << [[@end_year, @min_value], [@end_year, @max_value]]
    series_options << { lineWidth: 1, color: "ff0000", markerOptions: { show: false}}
  end

.prediction
  .intro
    Hier kun je jouw scenario vergelijken met verwachtingen van experts. Jouw scenario valt binnen/buiten de expertverwachtingen.
  .slider_title= @input_element.name
  .upper_block
    .chart#backcasting
    .available_predictions
      %table
        - @input_element.predictions.each do |p|
          %tr
            %td= radio_button_tag :prediction_id, p.id, (p.id == @prediction.id)
            %td
              .colour{:style => "background: #{cycle(*colours)}"}
            %td
              #{p.user.try(:name)},
              - if p.user.try(:company_school)
                #{p.user.company_school},
              = p.title
              - if v = p.last_value
                (#{"%0.f" % v.value}#{@input_element.unit} in #{v.year})
              - if current_user.try(:admin?)
                = link_to 'edit', edit_admin_prediction_path(p), :target => '_new'
        %tr.user_prediction
          %td
          %td
            .colour{:style => "background: #{cycle(*colours)}"}
          %td Your prediction
  .prediction_details
    = render @prediction
  .buttons
    = button_to_function "apply", "alert('Not implemented yet')"
    = button_to_function "back", "parent.$.fancybox.close()"

:javascript
  $(function(){

    // let's prepare the json data produced on the ruby side
    var chart_data = {
      series: #{series.to_json},
      series_options: #{series_options.to_json},
      colours: #{colours.to_json}
    }

    // this method should have the logic to convert the slider value
    var calculate_user_value = function(x) {
      // var number_of_years = 10;
      // var base_value = ???
      // var out = base_value * Math.pow(1 + x / 100.0, number_of_years);
      return 500;
    }

    // let's get the current slider value
    if (parent && parent.input_elements) {
      var user_value = parent.input_elements.get(#{@input_element.id}).get('user_value');
      var processed_value = calculate_user_value(user_value);
      chart_data.series.push([[2010,0],[#{@end_year}, processed_value]]);
      $("tr.user_prediction").show();
    }

    // ajax loading of prediction details
    $("input[type=radio]").click(function(){
      var prediction_id = $(this).val();
      var url = "/predictions/" + prediction_id;
      $(".prediction_details").busyBox({spinner: '<img src="/images/layout/ajax-loader.gif" />'});
      $(".prediction_details").load(url, function() {
        $(".prediction_details").busyBox('close');
      });
    });
    
    //charts
    $.jqplot("backcasting", chart_data.series, {
        grid: {
          background: '#ffffff',
          borderWidth: 0,
          borderColor: '#ffffff',
          shadow: false
        },
        axes:{
          xaxis:{tickOptions:{formatString:'%.0f'}},
          yaxis:{tickOptions:{formatString:'%.0f'}}
        },
        seriesColors: chart_data.colours,
        series: chart_data.series_options,
        seriesDefaults : {
          markerOptions: { show: false }
        }
      }
    );
    
    // extra info links
    $(".more_info a").live('click', function(event){
      event.preventDefault();
      $(this).parent().find(".inline_description").toggle();
    });
  });