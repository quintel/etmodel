:ruby
  colours = ["#9B0505", "#040268", "#127024", "#CD9B06", "#660099", "#FF0057"]
  series = @predictions.map{|p| p.values_to_a}
  series_options = series.map{|x| {}}
- content_for :head do
  = stylesheet_link_tag 'prediction'
  = sprocket_include_tag 'backcasting'
  = javascript_include_tag 'backcasting'
  :javascript
    // let's prepare the json data produced on the ruby side
    var chart_data = {

      series: #{series.to_json},
      series_options: #{series_options.to_json},
      colours: #{colours.to_json}
    }

    // information about the slider
    var input_element = {
      command_type: #{@input_element.command_type.to_json},
      id: #{@input_element.id},
      value_for_prediction: #{@prediction.try(:corresponding_slider_value)}
    }

    var scenario = {
      start_year: 2010,
      end_year: #{@end_year.to_i},
      available: #{user_scenario_available?}
    }

.prediction
  %h1
    = (t('prediction.page_title.prefix') + "&nbsp;" + t('prediction.page_title.' + @input_element.key)).html_safe
  .help_link
    = link_to t('prediction.help'), "http://wiki.quintel.nl/index.php/Backcasting", :target=>"_blank"

  .upper_block
    .available_predictions
      %ul
        - if user_scenario_available?
          %li.clickable_prediction.user_prediction
            %span
              - radio_button_tag :prediction_id, ''
              = t 'prediction.your_scenario'
            %span#user_value.right_align 
              #{describe_user_value(@input_element)}
            .colour{:style => "border-bottom: solid 4px #{cycle(*colours)}"}
        - @predictions.each do |p|
          %li.clickable_prediction{:prediction_id => "#{p.id}",:'data-slider_value' => "#{p.corresponding_slider_value}", :class=>"#{p.id == @prediction.id ? 'active' : ''}"}
            %span
              - radio_button_tag :prediction_id, p.id, (p.id == @prediction.id), :'data-slider_value' => p.corresponding_slider_value
              #{p.user.try(:name)}
              %br
              %i= p.title
            %span.right_align
              - if current_user.try(:admin?)
                = link_to 'edit', edit_admin_prediction_path(p), :target => '_new'
              #{describe_prediction(p)}
            .colour{:style => "border-bottom: solid 4px #{cycle(*colours)}"}

    %h2.chart_title= t('prediction.chart_title.' + @input_element.key)
    .chart#backcasting
    
  .prediction_details
    = render @prediction
- unless user_scenario_available?
  .footer_spacer