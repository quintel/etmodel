- item_class = 'selected' if slide.short_name == @selected_slide_key
%li.accordion_element
  %h3{:class               => item_class,
      'data-slide'         => slide.url,
      'data-default_chart' => slide.output_element_key,
      'data-alt_chart'     => slide.alt_output_element_key,
      'style'              => @interface.slides.size == 1 ? 'display:none;' : ''}
    = link_to t("slides.#{slide.key}.title").html_safe, slide.url
  .slide
    .description
      %p
        = image_tag(slide.image_path) if slide.image.present?
        = raw format_description(I18n.t("slides.#{slide.key}.description"))

    .items
      - unless slide.general_sub_header.blank?
        .sub_header{ :id => "sub_header_#{slide.key}" }
          %span.sub_header_arrow= t("subheaders.#{to_yml_syntax(slide.general_sub_header)}")
          - unless slide.subheader_image.blank?
            %img.sub_header_image{:src => "/assets/slides/#{slide.subheader_image}"}

      - slide.input_elements_not_belonging_to_a_group.each do |input_element|
        = render :partial => 'input_elements/slider', :object => input_element

      - slide.grouped_input_elements.each do |group, sliders|
        .interface_group
          %span{:style =>"float:left"}= t("accordion.#{to_yml_syntax(group)}")
          - unless slide.group_sub_header.blank?
            %span.sub_header_arrow
              = t("subheaders.#{to_yml_syntax(group)}", default: t("subheaders.#{to_yml_syntax(slide.group_sub_header)}"))
        - sliders.each do |input_element|
          = render :partial => 'input_elements/slider', :object => input_element

    = render "scenarios/slides/#{ slide.key }" rescue nil
