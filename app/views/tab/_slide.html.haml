- selected = 'selected' if @slides.first == slide
%li.accordion_element{:class => selected}
  %span.headline{:data => {:slide => slide.short_name,
                           :default_chart => slide.output_element_id,
                           :alt_chart => slide.alt_output_element_id}}
    = link_to t("slides.#{slide.key}").html_safe,
      tab_path(params[:tab], params[:sidebar], :anchor => slide.short_name),
      :class => 'slide_header', :id => slide.key
  .slide
    %p
      = image_tag(slide.image_path) if slide.image.present?
      = raw slide.description.try(:content)
    %ul.valuees
      - unless slide.general_sub_header.blank?
        %div.sub_header{:id => "sub_header_#{slide.id}"}
          %span.subheader_arrow= t("subheaders.#{to_yml_syntax(slide.general_sub_header)}")
          - unless slide.subheader_image.blank?
            %img.subheader_image{:src => "/assets/slides/#{slide.subheader_image}"}
      - slide.input_elements_not_belonging_to_a_group.each do |input_element|
        = render :partial => 'input_elements/slider', :object => input_element
      - slide.grouped_input_elements.each do |group, sliders|
        - title = slide.group_sub_header
        %div.interface_group
          %span{:style =>"float:left"}= t("accordion.#{to_yml_syntax(group)}")
          - unless title.blank?
            %span.subheader_arrow= t("subheaders.#{to_yml_syntax(title)}")
        - sliders.each do |input_element|
          = render :partial => 'input_elements/slider', :object => input_element

    - unless @slides.last == slide
      %a.next_slide{:href => '#'}= I18n.t("go_to_next")

%script
  - slide.safe_input_elements.each do |i|
    window.input_elements.add(#{i.to_json.html_safe}.input_element);
