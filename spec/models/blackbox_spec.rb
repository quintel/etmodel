        # This spec file is autogenerated. 
        # To generate a new one:
        # - go to /admin/blackboxes/ID/rspec
        # - copy paste the text within the textarea into this file
        # - download gquery_hash.marshal and graph.ID.marshal into spec/fixtures
        require 'spec_helper'
        
        load_carriers
        
        describe "Blackbox" do
          
          describe "scenario: Empty" do
            before(:all) do
              Current.teardown_after_request!
              Current.scenario.update_statements = {}
              Current.load_graph_from_marshal("spec/fixtures/gql.marshal")
              Gquery.load_gquery_hash_from_marshal("spec/fixtures/gquery_hash.marshal")
            end
        
              
            it "should run gquery: co2_emission_electricity_ex_import" do
              r = Current.gql.query("SUM(VALUE(GROUP(electricity_production);primary_co2_emission))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 56397358457 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 56397358457 
            end
            
              
            it "should run gquery: co2_emission_electricity_import" do
              r = Current.gql.query("PRODUCT(Q(co2_per_mj_domestic_electricity_production),VALUE(electricity_import_export_energy;demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2575213827 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2575213827 
            end
            
              
            it "should run gquery: co2_emission_electricity" do
              r = Current.gql.query("SUM(Q(co2_emission_electricity_ex_import),Q(co2_emission_electricity_import))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 58972572285 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 58972572285 
            end
            
              
            it "should run gquery: co2_emission_total" do
              r = Current.gql.query("SUM(VALUE(G(final_demand_cbs);primary_co2_emission),Q(co2_emission_electricity_import))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 152244047128 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 152244047128 
            end
            
              
            it "should run gquery: co2_reduction_final_demand_to_1990_in_percent" do
              r = Current.gql.query("SUM(DIVIDE(SUM(V(G(final_demand_cbs);primary_co2_emission)),PRODUCT(AREA(co2_emission_1990),BILLIONS)),-1)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: oil_use_refinery" do
              r = Current.gql.query("SUM(V(lpg_production_transport,diesel_production_transport,gasoline_production_transport;input_of_crude_oil))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 457917186350 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 457917186350 
            end
            
              
            it "should run gquery: cost_refinery" do
              r = Current.gql.query("SUM(PRODUCT(V(CARRIER(lpg);cost_per_mj),V(lpg_production_transport;output_of_lpg)),PRODUCT(V(CARRIER(diesel);cost_per_mj),V(diesel_production_transport;output_of_diesel)),PRODUCT(V(CARRIER(gasoline);cost_per_mj),V(gasoline_production_transport;output_of_gasoline)),NEG(PRODUCT(V(CARRIER(crude_oil);cost_per_mj),Q(oil_use_refinery))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1668317620 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1668317620 
            end
            
              
            it "should run gquery: cost_fuels_energy_sector" do
              r = Current.gql.query("SUM(PRODUCT(V(CARRIER(natural_gas);cost_per_mj),V(gas_demand_energy_energetic;input_of_natural_gas)),PRODUCT(V(CARRIER(crude_oil);cost_per_mj),V(oil_demand_energy_energetic;input_of_crude_oil)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: cost_fuels_grid_losses" do
              r = Current.gql.query("SUM(PRODUCT(V(CARRIER(natural_gas);cost_per_mj),V(grid_losses_gas_energy;demand)),PRODUCT(V(CARRIER(crude_oil);cost_per_mj),V(grid_losses_oil_energy;demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11947261 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11947261 
            end
            
              
            it "should run gquery: cost_energy_sector_fuels" do
              r = Current.gql.query("SUM(Q(cost_fuels_grid_losses),Q(cost_fuels_energy_sector),Q(cost_refinery))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1680264882 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1680264882 
            end
            
              
            it "should run gquery: cost_heat_production" do
              r = Current.gql.query("SUM(V(G(heat_production),G(decentral_production);demand*useful_output*total_cost_per_mj),Q(co2_cost_industry_without_electricity),Q(insulation_costs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 12270560284 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 12270560284 
            end
            
              
            it "should run gquery: cost_electricity_production" do
              r = Current.gql.query("SUM(Q(cost_domestic_electricity),Q(cost_electricity_import),NEG(Q(cost_electricity_export)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8403351173 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8403351173 
            end
            
              
            it "should run gquery: cost_electricity_import" do
              r = Current.gql.query("PRODUCT(Q(cost_domestic_electricity),V(electricity_import_export_energy;demand),INVERSE(SUM(V(GROUP(electricity_production);output_of_electricity))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 366957553 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 366957553 
            end
            
              
            it "should run gquery: cost_domestic_electricity" do
              r = Current.gql.query("SUM(V(G(electricity_production);total_cost_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8036395441 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8036395441 
            end
            
              
            it "should run gquery: cost_transport_fuels" do
              r = Current.gql.query("SUM(V(INTERSECTION(G(final_demand_cbs),SECTOR(transport));cost_of_outputs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4907438126 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4907438126 
            end
            
              
            it "should run gquery: cost_non_energetic_fuels" do
              r = Current.gql.query("SUM(V(INTERSECTION(G(final_demand_cbs),USE(non_energetic));cost_of_inputs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5328108056 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5328108056 
            end
            
              
            it "should run gquery: cost_total" do
              r = Current.gql.query("SUM(Q(cost_heat_production),Q(cost_electricity_production),Q(cost_transport_fuels),Q(cost_energy_sector_fuels),Q(cost_non_energetic_fuels),IF(EQUALS(AREA(area),nl),PRODUCT(Q(annual_netwerk_cost),BILLIONS),0))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 35851722523 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 35851722523 
            end
            
              
            it "should run gquery: area_footprint_per_nl" do
              r = Current.gql.query("DIVIDE(GRAPH(area_footprint),AREA(areable_land))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: potential_roof_pv_production" do
              r = Current.gql.query("PRODUCT(DIVIDE(AREA(roof_surface_available_pv),V(local_solar_pv_grid_connected_energy_energetic;land_use_in_nl)),V(local_solar_pv_grid_connected_energy_energetic;typical_capacity_effective_in_mj_s),V(local_solar_pv_grid_connected_energy_energetic;capacity_factor),SECS_PER_YEAR)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 79999923999 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 79999923999 
            end
            
              
            it "should run gquery: energy_dependence" do
              r = Current.gql.query("DIVIDE(SUM(V(G(energy_import_export);demand),NEG(V(electricity_export_energy;demand))),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: fuel_dependence" do
              r = Current.gql.query("DIVIDE(SUM(V(G(energy_import_export);demand)),SUM(V(G(mining_and_extraction),G(energy_import_export);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: primary_demand_of_final_demand" do
              r = Current.gql.query("SUM(V(G(final_demand_cbs);primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3209552592619 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3209552592619 
            end
            
              
            it "should run gquery: sustainability_heat_production" do
              r = Current.gql.query("DIVIDE(SUM(V(G(heat_production);useful_output*demand*sustainable_input_factor)),SUM(V(G(heat_production);useful_output*demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: sustainability_electricity_production" do
              r = Current.gql.query("DIVIDE(SUM(V(G(electricity_production);useful_output*demand*sustainable_input_factor)),SUM(V(G(electricity_production);useful_output*demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: share_of_renewable_electricity" do
              r = Current.gql.query("DIVIDE(SUM(V(G(electricity_production);primary_demand_of_sustainable)),SUM(V(G(electricity_production);primary_demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: share_of_renewable_energy" do
              r = Current.gql.query("DIVIDE(SUM(Q(final_electricity_sustainable),Q(final_sustainable_steam),Q(final_sustainable_demand),Q(ambient_heat_use)),SUM(V(INTERSECTION(G(final_demand_cbs),USE(energetic));demand),Q(ambient_heat_use)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: share_of_renewable_energy_in_procent" do
              r = Current.gql.query("PRODUCT(Q(share_of_renewable_energy),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5 
            end
            
              
            it "should run gquery: centrally_produced_electricity_industry" do
              r = Current.gql.query("SUM(V(electricity_industry_energetic;demand),NEG(SUM(V(small_chp_industry_energetic,large_chp_industry_energetic,biomass_chp_industry_energetic,bio_oil_chp_industry_energetic;output_of_electricity))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 53808300000 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 53808300000 
            end
            
              
            it "should run gquery: fossil_heat_old" do
              r = Current.gql.query("SUM(V(micro_chp_households_energetic,central_heating_households_energetic,heater_on_coal_households_energetic,heater_on_oil_households_energetic,heater_on_greengas_households_energetic,cv_hot_water_households_energetic,heatpump_boiler_using_city_heat_households_energetic;output_of_heat_carriers),NEG(V(heatpump_boiler_using_city_heat_households_energetic;input_of_electricity)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 299582209395 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 299582209395 
            end
            
              
            it "should run gquery: fossil_heat" do
              r = Current.gql.query("SUM(V(micro_chp_households_energetic,central_heating_households_energetic,heater_on_coal_households_energetic,heater_on_oil_households_energetic,heater_on_greengas_households_energetic,cv_hot_water_households_energetic,cooking_energy_demand_households_energetic,cooling_demand_households_energetic,heatpump_boiler_using_city_heat_households_energetic,hot_water_demand_households_energetic,gasheatpump_households_energetic;output_of_heat_carriers),NEG(V(micro_chp_households_energetic,central_heating_households_energetic,heater_on_coal_households_energetic,heater_on_oil_households_energetic,heater_on_greengas_households_energetic,cv_hot_water_households_energetic,cooking_energy_demand_households_energetic,cooling_demand_households_energetic,heatpump_boiler_using_city_heat_households_energetic,hot_water_demand_households_energetic,gasheatpump_households_energetic;input_of_electricity)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 299582209395 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 299582209395 
            end
            
              
            it "should run gquery: fossil_heat_other" do
              r = Current.gql.query("SUM(V(gas_burner_other_other_energetic,oil_burner_other_other_energetic,coal_burner_other_other_energetic,steam_hot_water_other_energetic;output_of_heat_carriers))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 21348449209 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 21348449209 
            end
            
              
            it "should run gquery: fossil_heat_industry" do
              r = Current.gql.query("SUM(V(coal_burner_industry_industry_energetic,oil_burner_industry_industry_energetic,gas_burner_industry_industry_energetic,greengas_burner_industry_industry_energetic,large_chp_industry_energetic,small_chp_industry_energetic;output_of_heat_carriers))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 465883384394 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 465883384394 
            end
            
              
            it "should run gquery: fossil_heat_agriculture" do
              r = Current.gql.query("SUM(V(oil_burner_agri_agriculture_energetic,gas_burner_agri_agriculture_energetic,steam_hot_water_agriculture_energetic;output_of_heat_carriers))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 125939290611 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 125939290611 
            end
            
              
            it "should run gquery: fossil_heat_production" do
              r = Current.gql.query("SUM(Q(fossil_heat),Q(fossil_heat_industry),Q(fossil_heat_agriculture),Q(fossil_heat_other))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 912753333611 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 912753333611 
            end
            
              
            it "should run gquery: biomass_heat" do
              r = Current.gql.query("V(heater_on_biomass_households_energetic;output_of_useable_heat)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6641990856 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6641990856 
            end
            
              
            it "should run gquery: geothermal_supply" do
              r = Current.gql.query("SUM(V(geothermal_agri_agriculture_energetic,geothermal_heat_energy,collective_geothermal_households_energetic;output_of_useable_heat+output_of_hot_water+output_of_steam_hot_water))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: ambient_heat" do
              r = Current.gql.query("SUM(V(heatpump_boiler_households_energetic,heat_pump_with_chs_households_energetic,heatpump_households_energetic,heatpump_using_city_heat_households_energetic,solar_panel_for_heating_households_energetic,solar_panel_for_hot_water_households_energetic;output_of_heat_carriers))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 986100681 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 986100681 
            end
            
              
            it "should run gquery: electricity_for_heat" do
              r = Current.gql.query("SUM(V(heatpump_boiler_households_energetic,electric_boiler_households_energetic,heat_pump_with_chs_households_energetic,electric_heater_households_energetic,heatpump_households_energetic,heatpump_using_city_heat_households_energetic,heatpump_addon_households_energetic,gasheatpump_households_energetic;input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 12382187655 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 12382187655 
            end
            
              
            it "should run gquery: centrally_produced_electricity_households" do
              r = Current.gql.query("SUM(V(electricity_households_energetic;demand),NEG(SUM(V(local_solar_pv_grid_connected_energy_energetic,collective_coal_chp_households_energetic,collective_gas_chp_households_energetic,collective_biomass_chp_households_energetic,local_wind_turbines_energy;output_of_electricity))),NEG(V(electricity_households_energetic;electricity_inversedflexible_output_link_value)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 86794398378 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 86794398378 
            end
            
              
            it "should run gquery: ambient_heat_agri" do
              r = Current.gql.query("SUM(V(heat_pump_with_CHS_agri_agriculture_energetic,geothermal_agri_agriculture_energetic;output_of_heat_carriers-input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: biomass_heat_production" do
              r = Current.gql.query("SUM(V(biomass_burner_agri_agriculture_energetic,bio_oil_chp_industry_energetic,biomass_chp_industry_energetic,biomass_burner_industry_industry_energetic,greengas_burner_industry_industry_energetic,biomass_burner_other_other_energetic,heater_on_greengas_households_energetic,heater_on_biomass_households_energetic;output_of_heat_carriers))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 23568236005 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 23568236005 
            end
            
              
            it "should run gquery: imported_energy_share" do
              r = Current.gql.query("PRODUCT(Q(energy_dependence),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 93 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 23 
            end
            
              
            it "should run gquery: electricity_production" do
              r = Current.gql.query("SUM(V(G(electricity_production);output_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 385461133713 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 385461133713 
            end
            
              
            it "should run gquery: electricity_dependence" do
              r = Current.gql.query("DIVIDE(V(interconnection_energy;demand),SUM(Q(electricity_production),V(interconnection_energy;demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: imported_electricity" do
              r = Current.gql.query("V(electricity_import_export_energy;output_of_imported_electricity)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 17600910195 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 17600910195 
            end
            
              
            it "should run gquery: imported_electricity_share" do
              r = Current.gql.query("PRODUCT(100,DIVIDE(Q(imported_electricity),SUM(Q(electricity_production),Q(imported_electricity))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4 
            end
            
              
            it "should run gquery: avg_total_cost_for_electricity_production_per_mj" do
              r = Current.gql.query("DIVIDE(SUM(V(G(electricity_production);total_cost_electricity)),SUM(V(G(electricity_production);output_of_electricity)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: electricity_import_total_cost" do
              r = Current.gql.query("PRODUCT(Q(imported_electricity),Q(avg_total_cost_for_electricity_production_per_mj))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 366957553 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 366957553 
            end
            
              
            it "should run gquery: total_cost_electricity" do
              r = Current.gql.query("SUM(Q(electricity_import_total_cost),Q(avg_total_cost_for_electricity_production_per_mj))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 366957553 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 366957553 
            end
            
              
            it "should run gquery: natural_gas_share" do
              r = Current.gql.query("V(energy_sector_gas_mixer_energy;natural_gas_input_conversion)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: greengas_share" do
              r = Current.gql.query("V(energy_sector_gas_mixer_energy;greengas_input_conversion)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: electricity_produced_from_natural_gas" do
              r = Current.gql.query("PRODUCT(GRAPH(electricity_produced_from_gas),Q(natural_gas_share))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 249320065795 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 249320065795 
            end
            
              
            it "should run gquery: electricity_produced_from_greengas" do
              r = Current.gql.query("PRODUCT(GRAPH(electricity_produced_from_gas),Q(greengas_share))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5160043308 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5160043308 
            end
            
              
            it "should run gquery: wind_coastal_percentage_used" do
              r = Current.gql.query("PRODUCT(DIVIDE(V(wind_coastal_energy;total_land_use),AREA(onshore_suitable_for_wind)),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: wind_inland_percentage_used" do
              r = Current.gql.query("PRODUCT(DIVIDE(V(wind_inland_energy;total_land_use),AREA(onshore_suitable_for_wind)),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: wind_offshore_percentage_used" do
              r = Current.gql.query("PRODUCT(DIVIDE(V(wind_offshore_energy;total_land_use),AREA(onshore_suitable_for_wind)),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: land_pv_percentage_used" do
              r = Current.gql.query("PRODUCT(DIVIDE(V(solar_pv_central_production_energy_energetic;total_land_use),AREA(land_available_for_solar)),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: land_csp_percentage_used" do
              r = Current.gql.query("PRODUCT(DIVIDE(V(solar_csp_energy;total_land_use),AREA(land_available_for_solar)),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: roof_pv_percentage_used" do
              r = Current.gql.query("PRODUCT(DIVIDE(V(local_solar_pv_grid_connected_energy_energetic;total_land_use),AREA(roof_surface_available_pv)),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: electricity_produced_from_coal" do
              r = Current.gql.query("SUM(V(coal_conv_energy,coal_pwd_energy,coal_pwd_ccs_energy,coal_lignite_energy,coal_igcc_energy,coal_igcc_ccs_energy,coal_oxyfuel_ccs_energy,coal_chp_energy,collective_coal_chp_households_energetic,coal_chp_buildings_energetic,lignite_chp_energy;output_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 77129133713 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 77129133713 
            end
            
              
            it "should run gquery: chp_electricity_output" do
              r = Current.gql.query("DIVIDE(SUM(V(Q(all_chp_converters);output_of_electricity),NEG(V(coal_chp_energy;output_of_electricity))),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 111 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 111 
            end
            
              
            it "should run gquery: heatpumps_input_of_electricity" do
              r = Current.gql.query("DIVIDE(SUM(V(heatpump_households_energetic,heatpump_boiler_using_city_heat_households_energetic,heatpump_using_city_heat_households_energetic,heatpump_boiler_households_energetic,heat_pump_with_CHS_agri_agriculture_energetic,heat_pump_with_chs_households_energetic;input_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: geothermal_output_of_electricity" do
              r = Current.gql.query("DIVIDE(SUM(NEG(V(geothermal_electricity_energy;output_of_electricity)),V(geothermal_agri_agriculture_energetic;input_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: electricity_growth" do
              r = Current.gql.query("DIVIDE(SUM(V(electricity_excl_heating_demand_households_energetic,electricity_agriculture_energetic,electricity_industry_energetic,electricity_other_energetic;output_of_electricity),NEG(SUM(V(electricity_demand_lighting_households_energetic,heat_pump_with_CHS_agri_agriculture_energetic,geothermal_agri_agriculture_energetic;input_of_electricity)))),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 205 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 205 
            end
            
              
            it "should run gquery: electricity_for_heat_without_heatpumps" do
              r = Current.gql.query("DIVIDE(SUM(V(electric_heater_buildings_energetic,electric_boiler_households_energetic,electric_heater_households_energetic;input_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13 
            end
            
              
            it "should run gquery: all_biofuels_transport_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 15 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 15 
            end
            
              
            it "should run gquery: all_biofuels_agriculture_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_industry_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_other_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_households_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_energy_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_energy_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));input_of_biodiesel),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));input_of_biofuel),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));input_of_algae_diesel),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));input_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_industry_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));input_of_biodiesel),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));input_of_biofuel),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));input_of_algae_diesel),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));input_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_transport_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));output_of_biodiesel+output_of_biofuel+output_of_algae_diesel+output_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 15 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 15 
            end
            
              
            it "should run gquery: all_biofuels_agriculture_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));input_of_biodiesel),V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));input_of_biofuel),V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));input_of_algae_diesel),V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));input_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_other_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));input_of_biodiesel),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));input_of_biofuel),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));input_of_algae_diesel),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));input_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_households_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));input_of_biodiesel),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));input_of_biofuel),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));input_of_algae_diesel),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));input_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: conventional_gas_use_for_micro_chp_output" do
              r = Current.gql.query("SUM(DIVIDE(V(micro_chp_households_energetic;output_of_heat_carriers),V(gas_burner_other_other_energetic;useable_heat_output_conversion)),DIVIDE(V(micro_CHP_production_households;output_of_electricity),0.53))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
              
              
              
              
              
              
            it "should run gquery: industry_biomass_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_biomass),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_biomass),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_bio_oil),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_bio_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 14 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 14 
            end
            
              
            it "should run gquery: industry_oil_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs)),INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_crude_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 645 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 645 
            end
            
              
            it "should run gquery: industry_uranium_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs)),INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_uranium)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 10 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 10 
            end
            
              
            it "should run gquery: industry_coal_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs)),INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_coal)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 146 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 146 
            end
            
              
            it "should run gquery: industry_lignite_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs)),INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_lignite)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: industry_waste_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs)),INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_waste)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 9 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 9 
            end
            
              
            it "should run gquery: industry_greengas_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs)),INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 7 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 7 
            end
            
              
            it "should run gquery: industry_primary_demand_without_gas" do
              r = Current.gql.query("SUM(Q(industry_biomass_primary_demand),Q(industry_oil_primary_demand),Q(industry_uranium_primary_demand),Q(industry_coal_primary_demand),Q(industry_lignite_primary_demand),Q(industry_waste_primary_demand),Q(industry_greengas_primary_demand),Q(all_biofuels_industry_primary),Q(industry_non_e_primary_demand),Q(all_biofuels_energy_primary),Q(industry_imported_e_primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 846 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 846 
            end
            
              
            it "should run gquery: households_primary_demand_without_gas" do
              r = Current.gql.query("SUM(Q(households_biomass_primary_demand),Q(households_oil_primary_demand),Q(households_uranium_primary_demand),Q(households_coal_primary_demand),Q(households_lignite_primary_demand),Q(households_waste_primary_demand),Q(households_non_e_primary_demand),Q(households_greengas_primary_demand),Q(all_biofuels_households_primary),Q(households_imported_e_primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 121 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 121 
            end
            
              
            it "should run gquery: households_biomass_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_biomass),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_bio_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 15 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 15 
            end
            
              
            it "should run gquery: households_oil_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_crude_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
            end
            
              
            it "should run gquery: households_uranium_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_uranium)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 12 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 12 
            end
            
              
            it "should run gquery: households_coal_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_coal)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 61 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 61 
            end
            
              
            it "should run gquery: households_lignite_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_lignite)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: households_waste_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_waste)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11 
            end
            
              
            it "should run gquery: households_greengas_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
            end
            
              
            it "should run gquery: transport_biomass_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_biomass),V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_bio_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: transport_oil_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_crude_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 470 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 470 
            end
            
              
            it "should run gquery: transport_uranium_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_uranium)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: transport_coal_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_coal)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
            end
            
              
            it "should run gquery: transport_lignite_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_lignite)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: transport_waste_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_waste)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: transport_greengas_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_biomass_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_biomass)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_oil_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_crude_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11 
            end
            
              
            it "should run gquery: agriculture_uranium_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_uranium)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_coal_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_coal)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_lignite_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_lignite)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_waste_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_waste)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_greengas_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
            end
            
              
            it "should run gquery: other_oil_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_crude_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 19 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 19 
            end
            
              
            it "should run gquery: other_uranium_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_uranium)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: other_coal_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_coal)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
            end
            
              
            it "should run gquery: other_lignite_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_lignite)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: other_waste_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_waste)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: other_greengas_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: other_biomass_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_biomass),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_bio_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 17 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 17 
            end
            
              
            it "should run gquery: transport_primary_demand_without_gas" do
              r = Current.gql.query("SUM(Q(transport_biomass_primary_demand),Q(transport_oil_primary_demand),Q(transport_uranium_primary_demand),Q(transport_coal_primary_demand),Q(transport_lignite_primary_demand),Q(transport_non_e_primary_demand),Q(transport_waste_primary_demand),Q(transport_greengas_primary_demand),Q(all_biofuels_transport_primary),Q(transport_imported_e_primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 492 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 492 
            end
            
              
            it "should run gquery: agriculture_primary_demand_without_gas" do
              r = Current.gql.query("SUM(Q(agriculture_biomass_primary_demand),Q(agriculture_oil_primary_demand),Q(agriculture_uranium_primary_demand),Q(agriculture_coal_primary_demand),Q(agriculture_lignite_primary_demand),Q(agriculture_waste_primary_demand),Q(agriculture_greengas_primary_demand),Q(agriculture_non_e_primary_demand),Q(all_biofuels_agriculture_primary),Q(agriculture_imported_e_primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13 
            end
            
              
            it "should run gquery: other_primary_demand_without_gas" do
              r = Current.gql.query("SUM(Q(other_biomass_primary_demand),Q(other_oil_primary_demand),Q(other_uranium_primary_demand),Q(other_coal_primary_demand),Q(other_lignite_primary_demand),Q(other_waste_primary_demand),Q(other_greengas_primary_demand),Q(all_biofuels_other_primary),Q(other_non_e_primary_demand),Q(other_imported_e_primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 38 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 38 
            end
            
              
            it "should run gquery: industry_non_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_electricity),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4 
            end
            
              
            it "should run gquery: households_non_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5 
            end
            
              
            it "should run gquery: transport_non_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_non_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: other_non_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
              
            it "should run gquery: households_heating_final_demand_total" do
              r = Current.gql.query("SUM(V(Q(households_heating_converters);demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 256535348487 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 256535348487 
            end
            
              
            it "should run gquery: households_heating_final_demand_electricity" do
              r = Current.gql.query("SUM(V(Q(households_heating_converters);input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5429977142 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5429977142 
            end
            
              
            it "should run gquery: households_heating_final_demand_biomass" do
              r = Current.gql.query("SUM(V(Q(households_heating_converters);input_of_biomass),V(Q(households_heating_converters);input_of_biofuel),V(Q(households_heating_converters);input_of_greengas),V(Q(households_heating_converters);input_of_biodiesel),V(Q(households_heating_converters);input_of_bio_ethanol),V(Q(households_heating_converters);input_of_algae_diesel),V(Q(households_heating_converters);input_of_biogas))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8099988849 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8099988849 
            end
            
              
            it "should run gquery: households_heating_final_demand_ambient" do
              r = Current.gql.query("SUM(V(Q(households_heating_converters);input_of_ambient_heat),V(Q(households_heating_converters);input_of_solar_radiation),V(collective_geothermal_households_energetic;input_of_steam_hot_water))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 325799488 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 325799488 
            end
            
              
            it "should run gquery: households_heating_final_demand_fossil" do
              r = Current.gql.query("SUM(V(Q(households_heating_converters);input_of_coal),V(Q(households_heating_converters);input_of_crude_oil),V(Q(households_heating_converters);input_of_natural_gas),V(Q(households_heating_converters);input_of_diesel),V(Q(households_heating_converters);input_of_gasoline),V(Q(households_heating_converters);input_of_lignite),V(city_heating_network_energy_energetic;input_of_steam_hot_water))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 242679583007 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 242679583007 
            end
            
              
              
            it "should run gquery: ambient_heat_use" do
              r = Current.gql.query("SUM(V(ALL();input_of_ambient_heat))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 325799488 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 325799488 
            end
            
              
            it "should run gquery: industry_imported_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_imported_electricity),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_imported_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8 
            end
            
              
            it "should run gquery: other_imported_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_imported_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_imported_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_imported_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: households_imported_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_imported_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 9 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 9 
            end
            
              
            it "should run gquery: transport_imported_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_imported_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: number_of_electric_cars" do
              r = Current.gql.query("DIVIDE(PRODUCT(VALUE(cars_kms_demand_transport_energetic;demand),VALUE(electric_cars_transport_energetic;car_kms_output_link_share)),AREA(km_per_car))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_units_delta_electric_cars" do
              r = Current.gql.query("SUM(Q(number_of_electric_cars),NEG(VALUE(electric_cars_transport_energetic;peak_load_units_present)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_wd_electric_cars" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_cars),V(electric_cars_transport_energetic;simult_wd),Q(peak_load_per_unit_electric_car))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_per_unit_electric_car" do
              r = Current.gql.query("PRODUCT(V(electric_cars_transport_energetic;typical_capacity_gross_in_mj_s),V(electric_cars_transport_energetic;electricity_input_conversion))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_we_electric_cars" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_cars),V(electric_cars_transport_energetic;simult_we),Q(peak_load_per_unit_electric_car))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_se_electric_cars" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_cars),V(electric_cars_transport_energetic;simult_se),Q(peak_load_per_unit_electric_car))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_sd_electric_cars" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_cars),V(electric_cars_transport_energetic;simult_sd),Q(peak_load_per_unit_electric_car))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_we_lv_total" do
              r = Current.gql.query("SUM(Q(peak_load_delta_we_electric_cars),Q(peak_load_delta_we_electric_trucks),Q(peak_load_delta_hh_heaters),Q(peak_load_delta_electric_boiler))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
            end
            
              
            it "should run gquery: peak_load_delta_wd_lv_total" do
              r = Current.gql.query("SUM(Q(peak_load_delta_wd_electric_cars),Q(peak_load_delta_wd_electric_trucks),Q(peak_load_delta_hh_heaters),Q(peak_load_delta_electric_boiler))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
            end
            
              
            it "should run gquery: peak_load_delta_se_lv_total" do
              r = Current.gql.query("SUM(Q(peak_load_delta_se_electric_cars),Q(peak_load_delta_se_electric_trucks),Q(peak_load_delta_hh_coolers),Q(peak_load_delta_electric_boiler))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -39 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -39 
            end
            
              
            it "should run gquery: peak_load_delta_sd_lv_total" do
              r = Current.gql.query("SUM(Q(peak_load_delta_sd_electric_cars),Q(peak_load_delta_sd_electric_trucks),Q(peak_load_delta_hh_coolers),Q(peak_load_delta_electric_boiler))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -39 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -39 
            end
            
              
            it "should run gquery: peak_load_delta_max_lv_net" do
              r = Current.gql.query("MAX(Q(peak_load_delta_demand_lv_total),Q(peak_load_delta_supply_lv_total))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
            end
            
              
            it "should run gquery: peak_load_delta_max_mv_lv_transformer" do
              r = Current.gql.query("PRODUCT(Q(peak_load_delta_max_lv_net),V(lv_electricity_network_energy_energetic;simult_wd))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
            end
            
              
            it "should run gquery: co2_cost_electricity_production" do
              r = Current.gql.query("PRODUCT(AREA(co2_price),SUM(1,NEG(AREA(co2_percentage_free))),Q(co2_emission_electricity_ex_import))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 127401632 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 127401632 
            end
            
              
            it "should run gquery: co2_emission_industry" do
              r = Current.gql.query("SUM(V(INTERSECTION(USE(energetic),INTERSECTION(SECTOR(industry),GROUP(final_demand_cbs)));primary_co2_emission))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 50207917815 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 50207917815 
            end
            
              
            it "should run gquery: co2_cost_industry" do
              r = Current.gql.query("PRODUCT(AREA(co2_price),SUM(1,NEG(AREA(co2_percentage_free))),Q(co2_emission_industry))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 113419686 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 113419686 
            end
            
              
            it "should run gquery: co2_per_mj_domestic_electricity_production" do
              r = Current.gql.query("DIVIDE(SUM(VALUE(GROUP(electricity_production);primary_co2_emission)),SUM(VALUE(GROUP(electricity_production);output_of_electricity)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: share_domestic_electrity_production" do
              r = Current.gql.query("MIN(1,SUM(1,NEG(DIVIDE(V(interconnection_energy;demand),V(hv_electricity_network_energy;demand)))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: industry_final_demand_gas_and_green_gas" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));input_of_natural_gas),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));input_of_natural_gas),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));input_of_greengas),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));input_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 274 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 274 
            end
            
              
            it "should run gquery: co2_emission_industry_without_electricity" do
              r = Current.gql.query("SUM(V(INTERSECTION(USE(energetic),INTERSECTION(SECTOR(industry),GROUP(final_demand_cbs)));primary_co2_emission),NEG(V(electricity_industry_energetic;primary_co2_emission)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 39008176291 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 39008176291 
            end
            
              
            it "should run gquery: co2_cost_industry_without_electricity" do
              r = Current.gql.query("PRODUCT(AREA(co2_price),SUM(1,NEG(AREA(co2_percentage_free))),Q(co2_emission_industry_without_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 88119470 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 88119470 
            end
            
              
            it "should run gquery: industy_chp_renewable_heat" do
              r = Current.gql.query("DIVIDE(SUM(V(bio_oil_chp_industry_energetic,biomass_chp_industry_energetic;output_of_heat_carriers)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
            end
            
              
            it "should run gquery: industy_chp_fossil_heat" do
              r = Current.gql.query("DIVIDE(SUM(V(small_chp_industry_energetic,large_chp_industry_energetic;output_of_heat_carriers)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 130 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 130 
            end
            
              
            it "should run gquery: industy_chp_renewable_electricity" do
              r = Current.gql.query("DIVIDE(SUM(V(bio_oil_chp_industry_energetic,biomass_chp_industry_energetic;output_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
            end
            
              
            it "should run gquery: industy_chp_fossil_electricity" do
              r = Current.gql.query("DIVIDE(SUM(V(small_chp_industry_energetic,large_chp_industry_energetic;output_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 69 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 69 
            end
            
              
            it "should run gquery: industry_other_heat" do
              r = Current.gql.query("SUM(V(heating_demand_industry_energetic;demand),NEG(SUM(V(small_chp_industry_energetic,large_chp_industry_energetic,biomass_chp_industry_energetic,bio_oil_chp_industry_energetic;output_of_heat_carriers))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 359254990967 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 359254990967 
            end
            
              
            it "should run gquery: number_of_electric_trucks" do
              r = Current.gql.query("DIVIDE(PRODUCT(VALUE(truck_kms_demand_transport_energetic;demand),VALUE(electric_trucks_transport_energetic;truck_kms_output_link_share)),AREA(km_per_truck))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_units_delta_agri_heat_pumps_chs" do
              r = Current.gql.query("V(heat_pump_with_CHS_agri_agriculture_energetic;number_of_heat_plants_future-peak_load_units_present)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_per_unit_agri_heat_pump_chs" do
              r = Current.gql.query("PRODUCT(V(heat_pump_with_CHS_agri_agriculture_energetic;typical_capacity_gross_in_mj_s),V(heat_pump_with_CHS_agri_agriculture_energetic;electricity_input_conversion))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_wd_agri_heat_pumps_chs" do
              r = Current.gql.query("PRODUCT(Q(peak_load_per_unit_agri_heat_pump_chs),V(heat_pump_with_CHS_agri_agriculture_energetic;simult_wd),Q(peak_load_units_delta_agri_heat_pumps_chs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_sd_agri_heat_pumps_chs" do
              r = Current.gql.query("PRODUCT(Q(peak_load_per_unit_agri_heat_pump_chs),V(heat_pump_with_CHS_agri_agriculture_energetic;simult_sd),Q(peak_load_units_delta_agri_heat_pumps_chs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_we_agri_heat_pumps_chs" do
              r = Current.gql.query("PRODUCT(Q(peak_load_per_unit_agri_heat_pump_chs),V(heat_pump_with_CHS_agri_agriculture_energetic;simult_we),Q(peak_load_units_delta_agri_heat_pumps_chs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_se_agri_heat_pumps_chs" do
              r = Current.gql.query("PRODUCT(Q(peak_load_per_unit_agri_heat_pump_chs),V(heat_pump_with_CHS_agri_agriculture_energetic;simult_se),Q(peak_load_units_delta_agri_heat_pumps_chs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_local_solar_pv_grid_connected" do
              r = Current.gql.query("PRODUCT(V(local_solar_pv_grid_connected_energy_energetic;typical_capacity_gross_in_mj_s),Q(peak_load_units_delta_local_solar_pv_grid_connected))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_hh_micro_chp" do
              r = Current.gql.query("PRODUCT(PRODUCT(V(micro_chp_households_energetic;simult_we*1/1000),PRODUCT(V(micro_chp_households_energetic;share_of_heat_from_steam_hot_water_households_energetic),V(heat_from_steam_hot_water_households_energetic;share_of_heating_demand_households_energetic))),AREA(number_households))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_supply_lv_total" do
              r = Current.gql.query("SUM(Q(peak_load_delta_hh_micro_chp),Q(peak_load_delta_local_solar_pv_grid_connected))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_units_delta_electric_trucks" do
              r = Current.gql.query("SUM(Q(number_of_electric_trucks),NEG(VALUE(electric_trucks_transport_energetic;peak_load_units_present)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_per_unit_electric_truck" do
              r = Current.gql.query("PRODUCT(V(electric_trucks_transport_energetic;typical_capacity_gross_in_mj_s),V(electric_trucks_transport_energetic;electricity_input_conversion))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_wd_electric_trucks" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_trucks),V(electric_trucks_transport_energetic;simult_wd),Q(peak_load_per_unit_electric_truck))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_we_electric_trucks" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_trucks),V(electric_trucks_transport_energetic;simult_we),Q(peak_load_per_unit_electric_truck))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_se_electric_trucks" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_trucks),V(electric_trucks_transport_energetic;simult_se),Q(peak_load_per_unit_electric_truck))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_sd_electric_trucks" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_trucks),V(electric_trucks_transport_energetic;simult_sd),Q(peak_load_per_unit_electric_truck))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: peak_load_delta_on_mv_hv_transformer" do
              r = Current.gql.query("PRODUCT(SUM(V(Q(plants_connected_to_mv_hv_transformer);peak_load_capacity_delta_for_mv_hv)),0.75)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -239 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -239 
            end
            
              
            it "should run gquery: max_percentage_heat_network_industry" do
              r = Current.gql.query("MIN(1,DIVIDE(SUM(V(small_chp_industry_energetic,large_chp_industry_energetic,biomass_chp_industry_energetic,bio_oil_chp_industry_energetic;output_of_steam_hot_water)),V(heating_demand_industry_energetic;demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: high_voltage_capacity_delta" do
              r = Current.gql.query("SUM(MAX(V(Q(high_voltage_electricity_production);delta_in_capacity_in_mj_s),0),MAX(V(interconnection_energy;demand/3600/8760/capacity_factor-4200),V(interconnection_energy;demand/3600/8760/capacity_factor*-1-4200),0))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: decentral_capacity_delta" do
              r = Current.gql.query("SUM(V(Q(plants_connected_to_mv_hv_transformer);delta_in_capacity_in_mj_s),V(chp_agri_agriculture_energetic;delta_in_capacity_in_mj_s))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: total_capacity_delta" do
              r = Current.gql.query("SUM(Q(decentral_capacity_delta),Q(high_voltage_capacity_delta))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
              
            it "should run gquery: investment_cost_hv_net_total" do
              r = Current.gql.query("IF(EQUALS(AREA(area),nl),SUM(IF(Q(check_capacity_buffer_total),IF(Q(check_capacity_buffer_decentral),SUM(PRODUCT(Q(high_voltage_capacity_delta),0.20),PRODUCT(Q(decentral_capacity_delta),0.25)),PRODUCT(Q(total_capacity_delta),0.20)),0),Q(peak_load_investment_wind_offshore)),0)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_hv_grid_per_year" do
              r = Current.gql.query("IF(EQUALS(AREA(area),nl),SUM(DIVIDE(Q(investment_cost_hv_net_total),V(hv_electricity_network_energy;technical_lifetime)),PRODUCT(DIVIDE(Q(investment_cost_hv_net_total),2),V(hv_electricity_network_energy;wacc)),DIVIDE(Q(operational_costs_hv_net),MILLIONS)),0)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_units_delta_local_solar_pv_grid_connected" do
              r = Current.gql.query("V(local_solar_pv_grid_connected_energy_energetic;number_of_plants_future-peak_load_units_present)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_lv_net_total" do
              r = Current.gql.query("PRODUCT(Q(needed_expansion_ls_net),V(lv_electricity_network_energy_energetic;overnight_investment_ex_co2_per_mj_s))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_mv_lv_transformer_total" do
              r = Current.gql.query("PRODUCT(Q(needed_expansion_ms_ls_trafo),V(lv_mv_transformer_energy;overnight_investment_ex_co2_per_mj_s))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_max_mv_distribution_net" do
              r = Current.gql.query("MAX(Q(peak_load_delta_demand_mv_distribution_net),Q(peak_load_delta_supply_mv_distribution_net))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 595 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 595 
            end
            
              
            it "should run gquery: investment_cost_mv_distribution_net_total" do
              r = Current.gql.query("PRODUCT(Q(needed_expansion_ms_distribution),V(mv_distribution_network_energy_energetic;overnight_investment_ex_co2_per_mj_s))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_max_mv_transport_net" do
              r = Current.gql.query("PRODUCT(Q(peak_load_delta_max_mv_distribution_net),V(mv_distribution_network_energy_energetic;simult_wd))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 595 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 595 
            end
            
              
            it "should run gquery: investment_cost_mv_transport_net_total" do
              r = Current.gql.query("PRODUCT(Q(needed_expansion_ms_transport),V(mv_transport_network_energy;overnight_investment_ex_co2_per_mj_s))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_max_hv_mv_transformer" do
              r = Current.gql.query("MAX(Q(peak_load_delta_demand_hv_mv_transformer),Q(peak_load_delta_supply_hv_mv_transformer))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 552 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 552 
            end
            
              
            it "should run gquery: investment_cost_lv_net_per_year" do
              r = Current.gql.query("SUM(DIVIDE(Q(investment_cost_lv_net_total),V(lv_electricity_network_energy_energetic;technical_lifetime)),PRODUCT(DIVIDE(Q(investment_cost_lv_net_total),2),V(lv_electricity_network_energy_energetic;wacc)),Q(operational_costs_lv_net))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_mv_lv_transformer_per_year" do
              r = Current.gql.query("SUM(DIVIDE(Q(investment_cost_mv_lv_transformer_total),V(lv_mv_transformer_energy;technical_lifetime)),PRODUCT(DIVIDE(Q(investment_cost_mv_lv_transformer_total),2),V(lv_mv_transformer_energy;wacc)),Q(operational_costs_lv_mv_transformer))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_lv_grid_per_year" do
              r = Current.gql.query("DIVIDE(SUM(Q(investment_cost_mv_lv_transformer_per_year),Q(investment_cost_lv_net_per_year)),MILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_mv_grid_per_year" do
              r = Current.gql.query("DIVIDE(SUM(Q(investment_cost_mv_transport_net_per_year),Q(investment_cost_mv_distribution_net_per_year),Q(investment_cost_hv_mv_transformer_per_year)),MILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_hv_mv_transformer_total" do
              r = Current.gql.query("PRODUCT(Q(needed_expansion_hs_ms_trafo),V(mv_hv_transformer_energy;overnight_investment_ex_co2_per_mj_s))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_mv_distribution_net_per_year" do
              r = Current.gql.query("SUM(DIVIDE(Q(investment_cost_mv_distribution_net_total),V(mv_distribution_network_energy_energetic;technical_lifetime)),PRODUCT(DIVIDE(Q(investment_cost_mv_distribution_net_total),2),V(mv_distribution_network_energy_energetic;wacc)),Q(operational_costs_mv_distribution_network))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_hv_mv_transformer_per_year" do
              r = Current.gql.query("SUM(DIVIDE(Q(investment_cost_hv_mv_transformer_total),V(mv_hv_transformer_energy;technical_lifetime)),PRODUCT(DIVIDE(Q(investment_cost_hv_mv_transformer_total),2),V(mv_hv_transformer_energy;wacc)),Q(operational_costs_hv_mv_transformer))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: max_percentage_heat_network_agriculture" do
              r = Current.gql.query("MIN(1,DIVIDE(SUM(V(chp_agri_agriculture_energetic;output_of_steam_hot_water),V(heat_network_industry_energetic;demand)),V(heating_demand_agriculture_energetic;demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: investment_cost_mv_transport_net_per_year" do
              r = Current.gql.query("SUM(DIVIDE(Q(investment_cost_mv_transport_net_total),V(mv_transport_network_energy;technical_lifetime)),PRODUCT(DIVIDE(Q(investment_cost_mv_transport_net_total),2),V(mv_transport_network_energy;wacc)),Q(operational_costs_mv_transport_network))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: peak_load_delta_hh_heaters" do
              r = Current.gql.query("PRODUCT(SUM(V(Q(hh_heaters);simult_we*electricity_input_conversion*typical_capacity_gross_in_mj_s*share_of_heating_demand_households_energetic)),AREA(number_households))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 956 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 956 
            end
            
              
            it "should run gquery: annual_netwerk_cost" do
              r = Current.gql.query("DIVIDE(SUM(SUM(MAX(AREA(annual_infrastructure_cost_electricity),0),MAX(AREA(annual_infrastructure_cost_gas),0)),Q(investment_cost_lv_grid_per_year),Q(investment_cost_mv_grid_per_year),Q(investment_cost_hv_grid_per_year)),1000)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
            end
            
              
            it "should run gquery: number_electric_cars" do
              r = Current.gql.query("DIVIDE(V(electric_cars_transport_energetic;output_of_car_kms),AREA(km_per_car))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_units_delta_agri_chp" do
              r = Current.gql.query("V(chp_agri_agriculture_energetic;number_of_plants_future-peak_load_units_present)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2920 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2920 
            end
            
              
            it "should run gquery: peak_load_per_unit_agri_chp" do
              r = Current.gql.query("PRODUCT(V(chp_agri_agriculture_energetic;typical_capacity_gross_in_mj_s),V(chp_agri_agriculture_energetic;electricity_output_conversion))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_demand_lv_total" do
              r = Current.gql.query("MAX(Q(peak_load_delta_we_lv_total),Q(peak_load_delta_wd_lv_total),Q(peak_load_delta_se_lv_total),Q(peak_load_delta_sd_lv_total))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
            end
            
              
            it "should run gquery: peak_load_delta_demand_plants_connected_to_mv_distribution_net" do
              r = Current.gql.query("SUM(MAX(PRODUCT(SUM(V(INTERSECTION(GROUP(heat_production),Q(demand_plants_connected_to_mv_distribution_net));simult_we*electricity_input_conversion*typical_capacity_gross_in_mj_s*[number_of_heat_plants_future-peak_load_units_present])),1),PRODUCT(SUM(V(INTERSECTION(GROUP(heat_production),Q(demand_plants_connected_to_mv_distribution_net));simult_sd*electricity_input_conversion*typical_capacity_gross_in_mj_s*[number_of_heat_plants_future-peak_load_units_present])),1)),PRODUCT(SUM(V(INTERSECTION(GROUP(electricity_production),Q(demand_plants_connected_to_mv_distribution_net));simult_we*electricity_input_conversion*typical_capacity_gross_in_mj_s*[number_of_plants_future-peak_load_units_present])),1))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2 
            end
            
              
            it "should run gquery: peak_load_delta_supply_plants_connected_to_mv_distribution_net" do
              r = Current.gql.query("SUM(PRODUCT(SUM(V(INTERSECTION(GROUP(heat_production),Q(supply_plants_connected_to_mv_distribution_net));simult_we*electricity_output_conversion*typical_capacity_gross_in_mj_s*[number_of_heat_plants_future-peak_load_units_present])),1),PRODUCT(SUM(V(INTERSECTION(GROUP(electricity_production),Q(supply_plants_connected_to_mv_distribution_net));simult_we*electricity_output_conversion*typical_capacity_gross_in_mj_s*[number_of_plants_future-peak_load_units_present])),1))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 595 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 595 
            end
            
              
            it "should run gquery: peak_load_delta_supply_mv_distribution_net" do
              r = Current.gql.query("SUM(PRODUCT(Q(peak_load_delta_supply_lv_total),V(lv_electricity_network_energy_energetic;simult_wd),V(lv_mv_transformer_energy;simult_wd)),Q(peak_load_delta_supply_plants_connected_to_mv_distribution_net))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 595 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 595 
            end
            
              
            it "should run gquery: peak_load_delta_demand_mv_distribution_net" do
              r = Current.gql.query("SUM(PRODUCT(Q(peak_load_delta_demand_lv_total),V(lv_electricity_network_energy_energetic;simult_wd),V(lv_mv_transformer_energy;simult_wd)),Q(peak_load_delta_demand_plants_connected_to_mv_distribution_net))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 552 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 552 
            end
            
              
              
              
            it "should run gquery: peak_load_delta_supply_hv_mv_transformer" do
              r = Current.gql.query("SUM(PRODUCT(Q(peak_load_delta_supply_mv_distribution_net),V(mv_distribution_network_energy_energetic;simult_wd),V(mv_transport_network_energy;simult_wd)),Q(peak_load_delta_on_mv_hv_transformer))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 356 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 356 
            end
            
              
            it "should run gquery: peak_load_delta_demand_hv_mv_transformer" do
              r = Current.gql.query("PRODUCT(Q(peak_load_delta_demand_mv_distribution_net),V(mv_distribution_network_energy_energetic;simult_wd),V(mv_transport_network_energy;simult_wd))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 552 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 552 
            end
            
              
            it "should run gquery: cost_electricity_export" do
              r = Current.gql.query("PRODUCT(Q(cost_domestic_electricity),INVERSE(SUM(V(GROUP(electricity_production);output_of_electricity))),V(electricity_export_energy;demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1820 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1820 
            end
            
              
            it "should run gquery: dependency_share_uranium" do
              r = Current.gql.query("DIVIDE(SUM(V(uranium_import_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_gas" do
              r = Current.gql.query("DIVIDE(SUM(V(gas_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_oil" do
              r = Current.gql.query("DIVIDE(SUM(V(oil_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_biomass" do
              r = Current.gql.query("DIVIDE(SUM(V(biomass_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_coal" do
              r = Current.gql.query("DIVIDE(SUM(V(coal_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_electricity" do
              r = Current.gql.query("DIVIDE(SUM(V(electricity_import_export_energy;demand),V(electricity_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_biomass_group" do
              r = Current.gql.query("SUM(Q(dependency_share_biomass),Q(dependency_share_bio_diesel),Q(dependency_share_bio_ethanol),Q(dependency_share_biofuel),Q(dependency_share_greengas),Q(dependency_share_bio_oil),Q(dependency_share_waste),Q(dependency_share_algue_diesel))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_biofuel" do
              r = Current.gql.query("DIVIDE(SUM(V(biofuel_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_bio_diesel" do
              r = Current.gql.query("DIVIDE(SUM(V(bio_diesel_import_export_transport;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_bio_ethanol" do
              r = Current.gql.query("DIVIDE(SUM(V(bio_ethanol_import_export_transport;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_greengas" do
              r = Current.gql.query("DIVIDE(SUM(V(greengas_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_bio_oil" do
              r = Current.gql.query("DIVIDE(SUM(V(bio_oil_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_waste" do
              r = Current.gql.query("DIVIDE(SUM(V(waste_import_export_environment;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_algue_diesel" do
              r = Current.gql.query("DIVIDE(SUM(V(algue_diesel_import_export_transport_energetic;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_diesel" do
              r = Current.gql.query("DIVIDE(SUM(V(diesel_import_export_transport;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_gasoline" do
              r = Current.gql.query("DIVIDE(SUM(V(gasoline_import_export_transport;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_kerosine" do
              r = Current.gql.query("DIVIDE(SUM(V(kerosine_import_export_transport;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_lpg" do
              r = Current.gql.query("DIVIDE(SUM(V(lpg_import_export_transport;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_oil_group" do
              r = Current.gql.query("SUM(Q(dependency_share_oil),Q(dependency_share_diesel),Q(dependency_share_gasoline),Q(dependency_share_kerosine),Q(dependency_share_lpg),Q(dependency_share_lng))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_lng" do
              r = Current.gql.query("DIVIDE(SUM(V(lng_import_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: households_hot_water_fossil" do
              r = Current.gql.query("SUM(V(Q(households_hot_water_converters);input_of_coal),V(Q(households_hot_water_converters);input_of_crude_oil),V(Q(households_hot_water_converters);input_of_natural_gas),V(Q(households_hot_water_converters);input_of_diesel),V(Q(households_hot_water_converters);input_of_gasoline),V(Q(households_hot_water_converters);input_of_lignite))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 74973613123 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 74973613123 
            end
            
              
            it "should run gquery: households_hot_water_biomass" do
              r = Current.gql.query("SUM(V(Q(households_hot_water_converters);input_of_biomass),V(Q(households_hot_water_converters);input_of_biofuel),V(Q(households_hot_water_converters);input_of_greengas),V(Q(households_hot_water_converters);input_of_biodiesel),V(Q(households_hot_water_converters);input_of_bio_ethanol),V(Q(households_hot_water_converters);input_of_algae_diesel),V(Q(households_hot_water_converters);input_of_biogas))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: households_hot_water_ambient" do
              r = Current.gql.query("SUM(V(Q(households_hot_water_converters);input_of_ambient_heat),V(Q(households_hot_water_converters);input_of_solar_radiation))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 603601398 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 603601398 
            end
            
              
            it "should run gquery: households_hot_water_electricity" do
              r = Current.gql.query("SUM(V(Q(households_hot_water_converters);input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6952210513 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6952210513 
            end
            
              
              
            it "should run gquery: households_cooling_electricity" do
              r = Current.gql.query("SUM(V(Q(households_cooling_converters);input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2192817731 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2192817731 
            end
            
              
            it "should run gquery: households_cooling_ambient" do
              r = Current.gql.query("SUM(V(Q(households_cooling_converters);input_of_ambient_cold))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4386652068 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4386652068 
            end
            
              
            it "should run gquery: households_cooling_gas" do
              r = Current.gql.query("SUM(V(Q(households_cooling_converters);input_of_natural_gas))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: cooling_from_electricity" do
              r = Current.gql.query("PRODUCT(DIVIDE(Q(households_cooling_electricity),SUM(V(Q(households_cooling_converters);demand))),V(cooling_demand_households_energetic;input_of_cooling))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2192817731 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2192817731 
            end
            
              
            it "should run gquery: electricity_for_heat_buildings" do
              r = Current.gql.query("SUM(V(electric_heater_buildings_energetic,heatpump_ts_buildings_energetic,biomass_chp_buildings_energetic,coal_chp_buildings_energetic,gas_chp_buildings_energetic;input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1384088932 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1384088932 
            end
            
              
            it "should run gquery: buildings_cooling_gas" do
              r = Current.gql.query("PRODUCT(DIVIDE(SUM(V(Q(buildings_cooling_converters);input_of_natural_gas)),SUM(V(Q(buildings_cooling_converters);demand))),V(cooling_buildings_energetic;input_of_cooling))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: buildings_cooling_electricity" do
              r = Current.gql.query("PRODUCT(DIVIDE(SUM(V(Q(buildings_cooling_converters);input_of_electricity)),SUM(V(Q(buildings_cooling_converters);demand))),V(cooling_buildings_energetic;input_of_cooling))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11235530036 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11235530036 
            end
            
              
            it "should run gquery: buildings_cooling_ambient" do
              r = Current.gql.query("PRODUCT(DIVIDE(SUM(V(Q(buildings_cooling_converters);input_of_ambient_cold)),SUM(V(Q(buildings_cooling_converters);demand))),V(cooling_buildings_energetic;input_of_cooling))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 28088864416 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 28088864416 
            end
            
              
            it "should run gquery: buildings_heating_final_demand_ambient" do
              r = Current.gql.query("SUM(V(Q(buildings_heating_converters);input_of_ambient_carriers))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: buildings_heating_final_demand_biomass" do
              r = Current.gql.query("SUM(V(Q(buildings_heating_converters);input_of_biomass),V(Q(buildings_heating_converters);input_of_biofuel),V(Q(buildings_heating_converters);input_of_greengas),V(Q(buildings_heating_converters);input_of_biodiesel),V(Q(buildings_heating_converters);input_of_bio_ethanol),V(Q(buildings_heating_converters);input_of_algae_diesel),V(Q(buildings_heating_converters);input_of_biogas))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13840876647 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13840876647 
            end
            
              
            it "should run gquery: buildings_heating_final_demand_fossil" do
              r = Current.gql.query("SUM(V(Q(buildings_heating_converters);input_of_coal),V(Q(buildings_heating_converters);input_of_crude_oil),V(Q(buildings_heating_converters);input_of_natural_gas),V(Q(buildings_heating_converters);input_of_diesel),V(Q(buildings_heating_converters);input_of_gasoline),V(Q(buildings_heating_converters);input_of_lignite),V(Q(buildings_heating_converters);input_of_gasmix),V(local_heat_network_buildings_energetic;input_of_steam_hot_water))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 123183881076 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 123183881076 
            end
            
              
            it "should run gquery: buildings_heating_final_demand_total" do
              r = Current.gql.query("SUM(V(Q(buildings_heating_converters);demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 138408846657 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 138408846657 
            end
            
              
            it "should run gquery: buildings_heating_final_demand_electricity" do
              r = Current.gql.query("SUM(V(Q(buildings_heating_converters);input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1384088932 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1384088932 
            end
            
              
              
            it "should run gquery: buildings_share_of_heat_offices" do
              r = Current.gql.query("DIVIDE(V(heating_offices_current_insulation_buildings_energetic;demand),V(heat_demand_before_recirculation_buildings_energetic;demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: buildings_share_of_heat_other" do
              r = Current.gql.query("DIVIDE(V(heating_other_buildings_energetic;demand),V(heat_demand_before_recirculation_buildings_energetic;demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: buildings_share_of_heat_schools" do
              r = Current.gql.query("DIVIDE(V(heating_schools_current_insulation_buildings_energetic;demand),V(heat_demand_before_recirculation_buildings_energetic;demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: operational_costs_hv_net" do
              r = Current.gql.query("PRODUCT(DIVIDE(95853194,V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s)),SUM(V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s),SUM(MAX(SUM(Q(peak_load_delta_max_hv_mv_transformer),V(mv_hv_transformer_energy;typical_capacity_effective_in_mj_s)),V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s)),NEG(V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s))),NEG(V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: operational_costs_hv_mv_transformer" do
              r = Current.gql.query("PRODUCT(DIVIDE(155783851,V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s)),SUM(MAX(SUM(Q(peak_load_delta_max_hv_mv_transformer),V(mv_hv_transformer_energy;typical_capacity_effective_in_mj_s)),V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s)),NEG(V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: operational_costs_mv_transport_network" do
              r = Current.gql.query("PRODUCT(DIVIDE(155783851,V(mv_transport_network_energy;typical_capacity_gross_in_mj_s)),SUM(MAX(SUM(Q(peak_load_delta_max_mv_transport_net),V(mv_transport_network_energy;typical_capacity_effective_in_mj_s)),V(mv_transport_network_energy;typical_capacity_gross_in_mj_s)),NEG(V(mv_transport_network_energy;typical_capacity_gross_in_mj_s))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: operational_costs_mv_distribution_network" do
              r = Current.gql.query("PRODUCT(DIVIDE(155783851,V(mv_distribution_network_energy_energetic;typical_capacity_gross_in_mj_s)),SUM(MAX(SUM(Q(peak_load_delta_max_mv_distribution_net),V(mv_distribution_network_energy_energetic;typical_capacity_effective_in_mj_s)),V(mv_distribution_network_energy_energetic;typical_capacity_gross_in_mj_s)),NEG(V(mv_distribution_network_energy_energetic;typical_capacity_gross_in_mj_s))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: operational_costs_lv_mv_transformer" do
              r = Current.gql.query("PRODUCT(DIVIDE(233676777,V(lv_mv_transformer_energy;typical_capacity_gross_in_mj_s)),SUM(MAX(SUM(Q(peak_load_delta_max_mv_lv_transformer),V(lv_mv_transformer_energy;typical_capacity_effective_in_mj_s)),V(lv_mv_transformer_energy;typical_capacity_gross_in_mj_s)),NEG(V(lv_mv_transformer_energy;typical_capacity_gross_in_mj_s))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: operational_costs_lv_net" do
              r = Current.gql.query("PRODUCT(DIVIDE(233676777,V(lv_electricity_network_energy_energetic;typical_capacity_gross_in_mj_s)),SUM(MAX(SUM(Q(peak_load_delta_max_lv_net),V(lv_electricity_network_energy_energetic;typical_capacity_effective_in_mj_s)),V(lv_electricity_network_energy_energetic;typical_capacity_gross_in_mj_s)),NEG(V(lv_electricity_network_energy_energetic;typical_capacity_gross_in_mj_s))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: needed_expansion_ls_net" do
              r = Current.gql.query("SUM(MAX(SUM(Q(peak_load_delta_max_lv_net),V(lv_electricity_network_energy_energetic;typical_capacity_effective_in_mj_s)),V(lv_electricity_network_energy_energetic;typical_capacity_gross_in_mj_s)),NEG(V(lv_electricity_network_energy_energetic;typical_capacity_gross_in_mj_s)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: needed_expansion_ms_ls_trafo" do
              r = Current.gql.query("SUM(MAX(SUM(Q(peak_load_delta_max_mv_lv_transformer),V(lv_mv_transformer_energy;typical_capacity_effective_in_mj_s)),V(lv_mv_transformer_energy;typical_capacity_gross_in_mj_s)),NEG(V(lv_mv_transformer_energy;typical_capacity_gross_in_mj_s)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: needed_expansion_ms_distribution" do
              r = Current.gql.query("SUM(MAX(SUM(Q(peak_load_delta_max_mv_distribution_net),V(mv_distribution_network_energy_energetic;typical_capacity_effective_in_mj_s)),V(mv_distribution_network_energy_energetic;typical_capacity_gross_in_mj_s)),NEG(V(mv_distribution_network_energy_energetic;typical_capacity_gross_in_mj_s)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: needed_expansion_ms_transport" do
              r = Current.gql.query("SUM(MAX(SUM(Q(peak_load_delta_max_mv_transport_net),V(mv_transport_network_energy;typical_capacity_effective_in_mj_s)),V(mv_transport_network_energy;typical_capacity_gross_in_mj_s)),NEG(V(mv_transport_network_energy;typical_capacity_gross_in_mj_s)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: needed_expansion_hs_ms_trafo" do
              r = Current.gql.query("SUM(MAX(SUM(Q(peak_load_delta_max_hv_mv_transformer),V(mv_hv_transformer_energy;typical_capacity_effective_in_mj_s)),V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s)),NEG(V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: peak_load_delta_hh_coolers" do
              r = Current.gql.query("MAX(PRODUCT(SUM(SUM(V(Q(hh_coolers);simult_sd*electricity_input_conversion*typical_capacity_gross_in_mj_s*share_of_cooling_demand_households_energetic)),NEG(V(airco_households_energetic;simult_sd*electricity_input_conversion*typical_capacity_gross_in_mj_s*1))),AREA(number_households)),0)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: share_of_heaters_with_combi" do
              r = Current.gql.query("SUM(V(heater_on_biomass_households_energetic,central_heating_households_energetic,heatpump_households_energetic;share_of_heating_demand_households_energetic),SUM(PRODUCT(V(micro_chp_households_energetic;share_of_heat_from_steam_hot_water_households_energetic),V(heat_from_steam_hot_water_households_energetic;share_of_heating_demand_households_energetic)),PRODUCT(V(city_heating_network_energy_energetic;share_of_heat_from_steam_hot_water_households_energetic),V(heat_from_steam_hot_water_households_energetic;share_of_heating_demand_households_energetic))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: import_of_biomassa_group" do
              r = Current.gql.query("DIVIDE(SUM(V(biofuel_import_export_energy,bio_diesel_import_export_transport,bio_ethanol_import_export_transport,greengas_import_export_energy,bio_oil_import_export_energyalgue_diesel_import_export_transport_energetic;demand)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -8 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6 
            end
            
              
            it "should run gquery: peak_load_delta_electric_boiler" do
              r = Current.gql.query("PRODUCT(SUM(V(electric_boiler_households_energetic;simult_we*electricity_input_conversion*typical_capacity_gross_in_mj_s*share_of_hot_water_demand_households_energetic),NEG(V(electric_boiler_households_energetic;simult_we*electricity_input_conversion*typical_capacity_gross_in_mj_s*109718/1000000))),AREA(number_households))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -39 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -39 
            end
            
              
              
            it "should run gquery: number_of_heatpumps" do
              r = Current.gql.query("SUM(V(heatpump_households_energetic,heatpump_boiler_using_city_heat_households_energetic,heatpump_using_city_heat_households_energetic,heatpump_boiler_households_energetic,heat_pump_with_CHS_agri_agriculture_energetic,heat_pump_with_chs_households_energetic;number_of_heat_plants_future))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 36193 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 36193 
            end
            
              
            it "should run gquery: electricity_export_losses" do
              r = Current.gql.query("SUM(PRODUCT(V(electricity_export_energy;demand),INVERSE(V(hv_electricity_network_energy;electricity_output_conversion))),NEG(V(electricity_export_energy;demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6060 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6060 
            end
            
              
            it "should run gquery: final_electricity_sustainable" do
              r = Current.gql.query("SUM(INVALID_TO_ZERO(V(INTERSECTION(G(final_demand_electricity),USE(energetic));primary_demand_of_sustainable*demand/primary_demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 33738718370 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 33738718370 
            end
            
              
            it "should run gquery: final_sustainable_demand" do
              r = Current.gql.query("SUM(V(INTERSECTION(G(final_demand_cbs),USE(energetic));output_of_biomass+output_of_biofuel+output_of_greengas+output_of_biodiesel+output_of_bio_ethanol+output_of_bio_oil+output_of_water+output_of_algae_diesel+output_of_biogas))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 69994956250 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 69994956250 
            end
            
              
              
            it "should run gquery: all_biofuels_buildings_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));input_of_biodiesel),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));input_of_biofuel),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));input_of_algae_diesel),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));input_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_buildings_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: buildings_biomass_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_biomass),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_bio_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 39 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 39 
            end
            
              
            it "should run gquery: buildings_oil_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_crude_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 34 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 34 
            end
            
              
            it "should run gquery: buildings_uranium_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_uranium)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 18 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 18 
            end
            
              
            it "should run gquery: buildings_coal_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_coal)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 75 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 75 
            end
            
              
            it "should run gquery: buildings_lignite_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_lignite)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: buildings_waste_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_waste)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 17 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 17 
            end
            
              
            it "should run gquery: buildings_greengas_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2 
            end
            
              
            it "should run gquery: buildings_non_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 7 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 7 
            end
            
              
            it "should run gquery: buildings_imported_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_imported_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13 
            end
            
              
            it "should run gquery: insulation_costs" do
              r = Current.gql.query("SUM(V(V(extra_insulation_savings_households_energetic,heating_savings_insulation_new_households_energetic,insulation_savings_buildings_energetic);demand*total_cost_per_mje))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: cost_daylight_control" do
              r = Current.gql.query("PRODUCT(MAX(SUM(V(daylight_control_savings_buildings_energetic;light_output_link_share),NEG(V(0.0529669))),0),V(daylight_control_savings_buildings_energetic;total_cost_per_mj*demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: cost_motion_detection" do
              r = Current.gql.query("PRODUCT(MAX(SUM(V(motion_detection_savings_buildings_energetic;light_output_link_share),NEG(V(0.039))),0),V(motion_detection_savings_buildings_energetic;total_cost_per_mj*demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: buildings_primary_demand_without_gas" do
              r = Current.gql.query("SUM(Q(buildings_biomass_primary_demand),Q(buildings_oil_primary_demand),Q(buildings_uranium_primary_demand),Q(buildings_coal_primary_demand),Q(buildings_lignite_primary_demand),Q(buildings_waste_primary_demand),Q(buildings_greengas_primary_demand),Q(buildings_non_e_primary_demand),Q(all_biofuels_buildings_primary),Q(buildings_imported_e_primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 208 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 208 
            end
            
              
            it "should run gquery: peak_load_investment_wind_offshore" do
              r = Current.gql.query("MAX(PRODUCT(V(wind_offshore_energy;number_of_plants_future-75),1.2),0)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: final_sustainable_steam" do
              r = Current.gql.query("SUM(INVALID_TO_ZERO(V(INTERSECTION(G(final_demand_cbs),USE(energetic));input_of_steam_hot_water*primary_demand_of_sustainable/primary_demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6193740905 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6193740905 
            end
            
              
            it "should run gquery: investment_cost_electricity_grid_total_per_year" do
              r = Current.gql.query("SUM(Q(investment_cost_lv_grid_per_year),Q(investment_cost_mv_grid_per_year),Q(investment_cost_hv_grid_per_year))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: electricity_transport_over_grid" do
              r = Current.gql.query("DIVIDE(SUM(V(Q(central_electricity_production);output_of_electricity),V(electricity_import_export_energy;demand)),3.6)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 74178651085 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 74178651085 
            end
            
              
            it "should run gquery: network_costs_meuro_per_twh_transported" do
              r = Current.gql.query("DIVIDE(SUM(AREA(annual_infrastructure_cost_electricity),Q(investment_cost_electricity_grid_total_per_year)),DIVIDE(Q(electricity_transport_over_grid),BILLIONS))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 24 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 24 
            end
            
              
              
              
              
            it "should run gquery: co2_emission" do
              r = Current.gql.query("UNIT(Q(co2_emission_total);billions)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 152 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 152 
            end
            
              
            it "should run gquery: net_energy_import" do
              r = Current.gql.query("Q(energy_dependence)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: net_electricity_import" do
              r = Current.gql.query("Q(electricity_dependence)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: total_energy_cost" do
              r = Current.gql.query("UNIT(Q(cost_total);billions)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 35 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 35 
            end
            
              
            it "should run gquery: electricity_cost" do
              r = Current.gql.query("PRODUCT(SECS_PER_HOUR,Q(avg_total_cost_for_electricity_production_per_mj))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 75 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 75 
            end
            
              
            it "should run gquery: renewable_percentage" do
              r = Current.gql.query("Q(share_of_renewable_energy)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: onshore_land" do
              r = Current.gql.query("V(wind_inland_energy;total_land_use)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 98 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 98 
            end
            
              
            it "should run gquery: onshore_coast" do
              r = Current.gql.query("V(wind_coastal_energy;total_land_use)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 19 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 19 
            end
            
              
            it "should run gquery: offshore" do
              r = Current.gql.query("V(wind_offshore_energy;total_land_use)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 14 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 14 
            end
            
              
            it "should run gquery: roofs_for_solar_panels" do
              r = Current.gql.query("V(local_solar_pv_grid_connected_energy_energetic;total_land_use)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: land_for_solar_panels" do
              r = Current.gql.query("V(solar_pv_central_production_energy_energetic;total_land_use)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: land_for_csp" do
              r = Current.gql.query("V(solar_csp_energy;total_land_use)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: not_renewable_percentage" do
              r = Current.gql.query("SUM(1,NEG(Q(share_of_renewable_energy)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
          
          end
          
          describe "scenario: GAsterra" do
            before(:all) do
              Current.teardown_after_request!
              Current.scenario.update_statements = {"converters"=>{"effective_lighting_demand_households_energetic_AND_cooking_demand_households_energetic_AND_dishwasher_households_energetic_AND_fridge_households_energetic_AND_freezer_households_energetic_AND_vacuum_cleaner_households_energetic_AND_washing_machine_households_energetic_AND_clothes_dryer_households_energetic_AND_tv_households_energetic_AND_stereo_households_energetic_AND_computer_households_energetic_AND_heating_new_houses_current_insulation_households_energetic_AND_cooling_current_insulation_new_households_energetic_AND_hot_water_demand_households_energetic_AND_cars_kms_demand_transport_energetic"=>{"growth_rate"=>0.002}, "effective_lighting_demand_households_energetic_AND_dishwasher_households_energetic_AND_fridge_households_energetic_AND_freezer_households_energetic_AND_vacuum_cleaner_households_energetic_AND_washing_machine_households_energetic_AND_clothes_dryer_households_energetic_AND_tv_households_energetic_AND_stereo_households_energetic_AND_computer_households_energetic"=>{"growth_rate"=>0.005}, "heating_demand_with_current_insulation_households_energetic_AND_heating_new_houses_current_insulation_households_energetic"=>{"growth_rate"=>-0.01, "replacement_of_households_rate"=>0.002, "decrease_total"=>0.04666666666666667}, "cooling_current_insulation_old_households_energetic_AND_cooling_current_insulation_new_households_energetic"=>{"growth_rate"=>0.01}, "hot_water_demand_households_energetic"=>{"growth_rate"=>0.0}, "extra_insulation_savings_households_energetic"=>{"rc_value"=>2.2}, "heating_savings_insulation_new_households_energetic"=>{"rc_value"=>3.5}, ""=>{"heating_market_share"=>0.21899999999999997, ""=>0.2, "heating_buildings_market_share"=>0.126}, "solar_panel_for_heating_households_energetic"=>{"heating_market_share"=>0.08}, "heat_from_steam_hot_water_households_energetic"=>{"combined_input_link_share_to_micro_chp_households_energetic"=>0.25, "combined_input_link_share_to_collective_gas_chp_households_energetic"=>0.02, "combined_input_link_share_to_city_heating_network_energy_energetic"=>0.01, "combined_input_link_share_to_collective_biomass_chp_households_energetic"=>0.0, "combined_input_link_share_to_collective_geothermal_households_energetic"=>0.0}, "electric_heater_households_energetic"=>{"heating_market_share"=>0.0}, "heater_on_oil_households_energetic"=>{"heating_market_share"=>0.01}, "gasheatpump_households_energetic"=>{"heating_market_share"=>0.05}, "heatpump_households_energetic"=>{"heating_market_share"=>0.1}, "heatpump_addon_households_energetic"=>{"heating_market_share"=>0.1}, "heater_on_biomass_households_energetic"=>{"heating_market_share"=>0.01}, "heat_pump_with_chs_households_energetic"=>{"heating_market_share"=>0.15}, "heater_on_coal_households_energetic"=>{"heating_market_share"=>0.001}, "gas_boiler_households_energetic"=>{"hot_water_output_link_share"=>0.01}, "electric_boiler_households_energetic"=>{"hot_water_output_link_share"=>0.01}, "solar_panel_for_hot_water_households_energetic"=>{"hot_water_output_link_share"=>0.04}, "steam_hot_water_households_energetic"=>{"combined_input_link_share_to_micro_chp_hot_water_households_energetic"=>0.94}, "gas_stove_households_energetic"=>{"cooking_market_share"=>0.2}, "electric_stove_households_energetic"=>{"cooking_market_share"=>0.1}, "halogen_stove_households_energetic"=>{"cooking_market_share"=>0.3}, "induction_stove_households_energetic"=>{"cooking_market_share"=>0.4}, "freezer_households_energetic_AND_fridge_households_energetic"=>{"decrease_total"=>0.5}, "dishwasher_households_energetic"=>{"decrease_total"=>0.6}, "vacuum_cleaner_households_energetic"=>{"decrease_total"=>0.1}, "washing_machine_households_energetic"=>{"decrease_total"=>0.2}, "clothes_dryer_households_energetic"=>{"decrease_total"=>0.6}, "tv_households_energetic"=>{"decrease_total"=>0.1}, "stereo_households_energetic_AND_computer_households_energetic"=>{"decrease_total"=>0.2}, "other_appliances_households_energetic_AND_appliances_gas_demand_households_energetic"=>{"decrease_total"=>0.0}, "efficient_lighting_households_energetic"=>{"lighting_market_share"=>0.25}, "led_lighting_households_energetic"=>{"lighting_market_share"=>0.75}, "tv_households_energetic_AND_stereo_households_energetic_AND_computer_households_energetic_AND_appliances_buildings_energetic"=>{"decrease_total"=>0.15418502202643172}, "effective_lighting_demand_households_energetic_AND_lighting_buildings_energetic"=>{"decrease_total"=>0.07}, "appliances_buildings_energetic_AND_lighting_without_motion_detection_buildings_energetic_AND_heating_offices_current_insulation_buildings_energetic_AND_heating_schools_current_insulation_buildings_energetic_AND_cooling_demand_buildings_energetic_AND_heating_other_buildings_energetic\r\n"=>{"growth_rate"=>0.002}, "appliances_buildings_energetic_AND_lighting_without_motion_detection_buildings_energetic"=>{"growth_rate"=>0.005}, "heating_offices_current_insulation_buildings_energetic_AND_heating_schools_current_insulation_buildings_energetic"=>{"growth_rate"=>-0.01}, "cooling_demand_buildings_energetic"=>{"growth_rate"=>0.002}, "heating_schools_current_insulation_buildings_energetic"=>{"rc_value"=>2.2}, "heating_offices_current_insulation_buildings_energetic"=>{"rc_value"=>3.0}, "steam_hot_water_buildings_energetic"=>{"combined_input_link_share_to_biomass_chp_buildings_energetic"=>0.05, "combined_input_link_share_to_gas_chp_buildings_energetic"=>0.049, "combined_input_link_share_to_local_heat_network_buildings_energetic"=>0.001}, "electric_heater_buildings_energetic"=>{"heating_buildings_market_share"=>0.0}, "solarthermic_buildings_energetic"=>{"heating_buildings_market_share"=>0.15}, "gasheatpump_ts_buildings_energetic"=>{"heating_buildings_market_share"=>0.1}, "heatpump_ts_buildings_energetic"=>{"heating_buildings_market_share"=>0.4}, "biomass_fired_heater_buildings_energetic"=>{"heating_buildings_market_share"=>0.07400000000000001}, "oil_heater_buildings_energetic"=>{"heating_buildings_market_share"=>0.05}, "heating_offices_current_insulation_buildings_energetic_AND_heating_schools_current_insulation_buildings_energetic_AND_heating_other_buildings_energetic_AND_cooling_demand_buildings_energetic"=>{"ventilation_rate_buildings"=>1.8}, "heat_recirculation_savings_buildings_energetic"=>{"useable_heat_output_link_share"=>0.3}, "heat_recovery_savings_buildings_energetic"=>{"useable_heat_output_link_share"=>0.4}, "appliances_buildings_energetic_AND_cooking_buildings_energetic_AND_building_related_buildings_energetic_AND_hot_water_demand_buildings_energetic"=>{"decrease_rate"=>0.01}, "tl5_buildings_energetic"=>{"lighting_buildings_market_share"=>0.0}, "tl8_buildings_energetic"=>{"lighting_buildings_market_share"=>0.25}, "led_buildings_energetic"=>{"lighting_buildings_market_share"=>0.75}, "motion_detection_savings_buildings_energetic"=>{"light_output_link_share"=>0.1323529411764706}, "daylight_control_savings_buildings_energetic"=>{"light_output_link_share"=>0.23255813953488372}, "cars_kms_demand_transport_energetic"=>{"growth_rate"=>0.008}, "truck_kms_demand_transport_energetic"=>{"growth_rate"=>0.008}, "trains_transport_energetic"=>{"growth_rate"=>0.01, "decrease_rate"=>0.003}, "planes_transport_energetic"=>{"growth_rate"=>0.0, "decrease_rate"=>0.003}, "ships_transport_energetic"=>{"growth_rate"=>0.01, "decrease_rate"=>0.003}, "gasoline_cars_transport_energetic"=>{"car_kms_market_share"=>0.23}, "electric_cars_transport_energetic"=>{"car_kms_market_share"=>0.4, "car_kms_output_conversion_growth_rate"=>0.01}, "diesel_cars_transport_energetic"=>{"car_kms_market_share"=>0.3}, "lpg_cars_transport_energetic"=>{"car_kms_market_share"=>0.02}, "compressed_gas_cars_transport_energetic"=>{"car_kms_market_share"=>0.05}, "diesel_trucks_transport_energetic"=>{"truck_kms_market_share"=>0.82}, "gasoline_trucks_transport_energetic"=>{"truck_kms_market_share"=>0.03}, "electric_trucks_transport_energetic"=>{"truck_kms_market_share"=>0.1}, "compressed_gas_trucks_transport_energetic"=>{"truck_kms_market_share"=>0.05}, "diesel_cars_transport_energetic_AND_gasoline_cars_transport_energetic_AND_lpg_cars_transport_energetic_AND_compressed_gas_cars_transport_energetic"=>{"car_kms_output_conversion_growth_rate"=>0.01}, "compressed_gas_trucks_transport_energetic_AND_diesel_trucks_transport_energetic_AND_gasoline_trucks_transport_energetic"=>{"truck_kms_output_conversion_growth_rate"=>0.005}, "electricity_demand_industry_energetic"=>{"growth_rate"=>0.01, "decrease_rate"=>0.005}, "heating_demand_industry_energetic"=>{"growth_rate"=>0.01, "decrease_rate"=>0.005}, "gas_demand_industry_non_energetic_AND_electricity_demand_industry_non_energetic_AND_coal_demand_industry_non_energetic_AND_biofuel_demand_industry_non_energetic_AND_biomass_demand_industry_non_energetic_AND_greengas_demand_industry_non_energetic"=>{"growth_rate"=>0.01}, "oil_demand_industry_non_energetic"=>{"growth_rate"=>0.01}, "oil_burner_industry_industry_energetic"=>{"industry_heating_market_share"=>0.1}, "coal_burner_industry_industry_energetic"=>{"industry_heating_market_share"=>0.02}, "biomass_burner_industry_industry_energetic"=>{"industry_heating_market_share"=>0.1}, "steam_hot_water_industry_energetic"=>{"industry_heating_market_share"=>0.25}, "small_chp_industry_energetic"=>{"number_of_plants"=>125.0}, "bio_oil_chp_industry_energetic"=>{"number_of_plants"=>0.0}, "biomass_chp_industry_energetic"=>{"number_of_plants"=>30.0, "overnight_investment_ex_co2_per_mj_s_growth_total"=>1.2, "om_growth_total"=>0.5}, "electricity_demand_agriculture_energetic"=>{"growth_rate"=>0.004}, "heating_demand_agriculture_energetic"=>{"growth_rate"=>0.001}, "oil_burner_agri_agriculture_energetic"=>{"agri_heating_market_share"=>0.05}, "biomass_burner_agri_agriculture_energetic"=>{"agri_heating_market_share"=>0.1}, "heat_pump_with_CHS_agri_agriculture_energetic"=>{"agri_heating_market_share"=>0.25}, "geothermal_agri_agriculture_energetic"=>{"agri_heating_market_share"=>0.2}, "steam_hot_water_agriculture_energetic"=>{"agri_heating_market_share"=>0.2}, "chp_agri_agriculture_energetic"=>{"number_of_plants"=>3000.0}, "electricity_demand_other_energetic"=>{"growth_rate"=>0.01}, "heat_demand_other_other_energetic"=>{"growth_rate"=>0.001}, "chp_other_other_energetic"=>{"number_of_plants"=>127.0}, "gas_conv_energy_energetic_AND_gas_ccgt_energy_AND_chp_other_other_energetic_AND_large_chp_industry_energetic_AND_ccgt_ccs_energy"=>{"overnight_investment_ex_co2_per_mj_s_growth_total"=>1.2, "om_growth_total"=>0.5}, "oil_plant_energy"=>{"overnight_investment_ex_co2_per_mj_s_growth_total"=>1.2, "om_growth_total"=>0.5, "number_of_plants"=>0.0}, "coal_chp_energy_AND_coal_conv_energy_AND_coal_igcc_ccs_energy_AND_coal_igcc_energy_AND_coal_lignite_energy_AND_coal_oxyfuel_ccs_energy_AND_coal_pwd_ccs_energy_AND_coal_pwd_energy"=>{"overnight_investment_ex_co2_per_mj_s_growth_total"=>1.2, "om_growth_total"=>0.5}, "waste_incinerator_energy_energetic"=>{"overnight_investment_ex_co2_per_mj_s_growth_total"=>1.2, "om_growth_total"=>0.5, "number_of_plants"=>10.0}, "nuclear_iii_energy_AND_nuclear_conv_energy_energetic"=>{"overnight_investment_ex_co2_per_mj_s_growth_total"=>1.0, "om_growth_total"=>0.5}, "wind_coastal_energy_AND_wind_inland_energy"=>{"overnight_investment_ex_co2_per_mj_s_growth_total"=>-0.15, "om_growth_total"=>0.05}, "wind_offshore_energy"=>{"overnight_investment_ex_co2_per_mj_s_growth_total"=>-0.25, "om_growth_total"=>0.1, "number_of_plants"=>4000.0}, "hydro_river_energy"=>{"overnight_investment_ex_co2_per_mj_s_growth_total"=>0.1, "om_growth_total"=>0.0, "number_of_plants"=>4.0}, "blue_energy_energy"=>{"overnight_investment_ex_co2_per_mj_s_growth_total"=>-0.8, "om_growth_total"=>0.0, "number_of_plants"=>1.0}, "local_solar_pv_grid_connected_energy_energetic_AND_local_solar_pv_not_grid_connected_energy_energetic_AND_solar_pv_central_production_energy_energetic"=>{"overnight_investment_ex_co2_per_mj_s_growth_total"=>-0.8}, "solar_csp_energy"=>{"overnight_investment_ex_co2_per_mj_s_growth_total"=>-0.2, "number_of_plants"=>0.0}, "geothermal_electricity_energy"=>{"overnight_investment_ex_co2_per_mj_s_growth_total"=>-0.3, "om_growth_total"=>0.0, "number_of_plants"=>0.0}, "coal_pwd_ccs_energy_AND_coal_oxyfuel_ccs_energy_AND_coal_igcc_ccs_energy_AND_ccgt_ccs_energy"=>{"cost_om_variable_ex_fuel_co2_per_mj_growth_total"=>-0.05, "overnight_investment_co2_capture_per_mj_s_growth_total"=>-0.1}, "coal_pwd_energy"=>{"number_of_plants"=>0.0}, "coal_pwd_ccs_energy"=>{"number_of_plants"=>0.0}, "coal_igcc_energy"=>{"number_of_plants"=>0.0}, "coal_igcc_ccs_energy"=>{"number_of_plants"=>0.3}, "coal_oxyfuel_ccs_energy"=>{"number_of_plants"=>0.0}, "coal_conv_energy"=>{"number_of_plants"=>0.0}, "coal_lignite_energy"=>{"number_of_plants"=>0.0}, "gas_conv_energy_energetic"=>{"number_of_plants"=>0.0}, "gas_ccgt_energy"=>{"number_of_plants"=>1.0}, "ccgt_ccs_energy"=>{"number_of_plants"=>0.0}, "nuclear_iii_energy"=>{"number_of_plants"=>0.0}, "nuclear_conv_energy_energetic"=>{"number_of_plants"=>0.0}, "energy_sector_gas_mixer_energy"=>{"greengas_input_conversion_conversion"=>0.25}, "co_firing_coal_energy"=>{"number_of_plants"=>0.0}, "co_firing_gas_energy"=>{"number_of_plants"=>0.0}, "wind_inland_energy"=>{"number_of_plants"=>2000.0}, "wind_coastal_energy"=>{"number_of_plants"=>1000.0}, "solar_pv_central_production_energy_energetic"=>{"number_of_plants"=>100.0}, "diesel_mixer_transport_energetic"=>{"diesel_input_conversion_conversion"=>0.85, "biodiesel_input_conversion_conversion"=>0.15}, "gasoline_mixer_transport_energetic"=>{"gasoline_input_conversion_conversion"=>0.85, "bio_ethanol_input_conversion_conversion"=>0.15}, "compressed_gas_production_transport_energetic"=>{"natural_gas_input_conversion_conversion"=>0.75, "greengas_input_conversion_conversion"=>0.25}}, "area"=>{"local_solar_pv_grid_connected_energy_energetic"=>{"solarpanel_market_penetration"=>0.5}, "solar_panels_buildings_energetic"=>{"buildings_solarpanel_market_penetration"=>0.5}, "nl"=>{"co2_price_growth_total"=>1.0, "co2_percentage_free_value"=>0.0}}, "policies"=>{"co2_emission"=>{"value"=>-0.8}, "renewable_percentage"=>{"value"=>0.5}, "onshore_land"=>{"value"=>1000.0}, "onshore_coast"=>{"value"=>150.0}, "offshore"=>{"value"=>1500.0}, "roofs_for_solar_panels"=>{"value"=>266.7}, "land_for_solar_panels"=>{"value"=>100.0}, "land_for_csp"=>{"value"=>5.0}, "net_energy_import"=>{"value"=>1.0}, "net_electricity_import"=>{"value"=>1.0}, "total_energy_cost"=>{"value"=>0.5}, "electricity_cost"=>{"value"=>0.5}}, "carriers"=>{"crude_oil"=>{"cost_per_mj_growth_total"=>1.2}, "coal"=>{"cost_per_mj_growth_total"=>1.2}, "natural_gas"=>{"cost_per_mj_growth_total"=>1.2}, "biomass_AND_biofuel_AND_greengas_AND_biodiesel_AND_bio_ethanol_AND_bio_oil_AND_algae_diesel_AND_biogas"=>{"cost_per_mj_growth_total"=>1.2}, "uranium"=>{"cost_per_mj_growth_total"=>3.0}}}
              Current.load_graph_from_marshal("spec/fixtures/gql.marshal")
              Gquery.load_gquery_hash_from_marshal("spec/fixtures/gquery_hash.marshal")
            end
        
              
            it "should run gquery: co2_emission_electricity_ex_import" do
              r = Current.gql.query("SUM(VALUE(GROUP(electricity_production);primary_co2_emission))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 35157981746 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 56397358457 
            end
            
              
            it "should run gquery: co2_emission_electricity_import" do
              r = Current.gql.query("PRODUCT(Q(co2_per_mj_domestic_electricity_production),VALUE(electricity_import_export_energy;demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2575213827 
            end
            
              
            it "should run gquery: co2_emission_electricity" do
              r = Current.gql.query("SUM(Q(co2_emission_electricity_ex_import),Q(co2_emission_electricity_import))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 35157981746 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 58972572285 
            end
            
              
            it "should run gquery: co2_emission_total" do
              r = Current.gql.query("SUM(VALUE(G(final_demand_cbs);primary_co2_emission),Q(co2_emission_electricity_import))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 97135641998 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 152244047128 
            end
            
              
            it "should run gquery: co2_reduction_final_demand_to_1990_in_percent" do
              r = Current.gql.query("SUM(DIVIDE(SUM(V(G(final_demand_cbs);primary_co2_emission)),PRODUCT(AREA(co2_emission_1990),BILLIONS)),-1)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: oil_use_refinery" do
              r = Current.gql.query("SUM(V(lpg_production_transport,diesel_production_transport,gasoline_production_transport;input_of_crude_oil))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 260376280275 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 457917186350 
            end
            
              
            it "should run gquery: cost_refinery" do
              r = Current.gql.query("SUM(PRODUCT(V(CARRIER(lpg);cost_per_mj),V(lpg_production_transport;output_of_lpg)),PRODUCT(V(CARRIER(diesel);cost_per_mj),V(diesel_production_transport;output_of_diesel)),PRODUCT(V(CARRIER(gasoline);cost_per_mj),V(gasoline_production_transport;output_of_gasoline)),NEG(PRODUCT(V(CARRIER(crude_oil);cost_per_mj),Q(oil_use_refinery))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -2174059458 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1668317620 
            end
            
              
            it "should run gquery: cost_fuels_energy_sector" do
              r = Current.gql.query("SUM(PRODUCT(V(CARRIER(natural_gas);cost_per_mj),V(gas_demand_energy_energetic;input_of_natural_gas)),PRODUCT(V(CARRIER(crude_oil);cost_per_mj),V(oil_demand_energy_energetic;input_of_crude_oil)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: cost_fuels_grid_losses" do
              r = Current.gql.query("SUM(PRODUCT(V(CARRIER(natural_gas);cost_per_mj),V(grid_losses_gas_energy;demand)),PRODUCT(V(CARRIER(crude_oil);cost_per_mj),V(grid_losses_oil_energy;demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 19777498 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11947261 
            end
            
              
            it "should run gquery: cost_energy_sector_fuels" do
              r = Current.gql.query("SUM(Q(cost_fuels_grid_losses),Q(cost_fuels_energy_sector),Q(cost_refinery))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -2154281959 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1680264882 
            end
            
              
            it "should run gquery: cost_heat_production" do
              r = Current.gql.query("SUM(V(G(heat_production),G(decentral_production);demand*useful_output*total_cost_per_mj),Q(co2_cost_industry_without_electricity),Q(insulation_costs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 24712495011 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 12270560284 
            end
            
              
            it "should run gquery: cost_electricity_production" do
              r = Current.gql.query("SUM(Q(cost_domestic_electricity),Q(cost_electricity_import),NEG(Q(cost_electricity_export)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 17631738464 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8403351173 
            end
            
              
            it "should run gquery: cost_electricity_import" do
              r = Current.gql.query("PRODUCT(Q(cost_domestic_electricity),V(electricity_import_export_energy;demand),INVERSE(SUM(V(GROUP(electricity_production);output_of_electricity))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 366957553 
            end
            
              
            it "should run gquery: cost_domestic_electricity" do
              r = Current.gql.query("SUM(V(G(electricity_production);total_cost_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 24209714622 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8036395441 
            end
            
              
            it "should run gquery: cost_transport_fuels" do
              r = Current.gql.query("SUM(V(INTERSECTION(G(final_demand_cbs),SECTOR(transport));cost_of_outputs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8265458314 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4907438126 
            end
            
              
            it "should run gquery: cost_non_energetic_fuels" do
              r = Current.gql.query("SUM(V(INTERSECTION(G(final_demand_cbs),USE(non_energetic));cost_of_inputs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 15672614052 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5328108056 
            end
            
              
            it "should run gquery: cost_total" do
              r = Current.gql.query("SUM(Q(cost_heat_production),Q(cost_electricity_production),Q(cost_transport_fuels),Q(cost_energy_sector_fuels),Q(cost_non_energetic_fuels),IF(EQUALS(AREA(area),nl),PRODUCT(Q(annual_netwerk_cost),BILLIONS),0))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 68011497672 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 35851722523 
            end
            
              
            it "should run gquery: area_footprint_per_nl" do
              r = Current.gql.query("DIVIDE(GRAPH(area_footprint),AREA(areable_land))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: potential_roof_pv_production" do
              r = Current.gql.query("PRODUCT(DIVIDE(AREA(roof_surface_available_pv),V(local_solar_pv_grid_connected_energy_energetic;land_use_in_nl)),V(local_solar_pv_grid_connected_energy_energetic;typical_capacity_effective_in_mj_s),V(local_solar_pv_grid_connected_energy_energetic;capacity_factor),SECS_PER_YEAR)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 79999923999 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 79999923999 
            end
            
              
            it "should run gquery: energy_dependence" do
              r = Current.gql.query("DIVIDE(SUM(V(G(energy_import_export);demand),NEG(V(electricity_export_energy;demand))),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: fuel_dependence" do
              r = Current.gql.query("DIVIDE(SUM(V(G(energy_import_export);demand)),SUM(V(G(mining_and_extraction),G(energy_import_export);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: primary_demand_of_final_demand" do
              r = Current.gql.query("SUM(V(G(final_demand_cbs);primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2900939985020 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3209552592619 
            end
            
              
            it "should run gquery: sustainability_heat_production" do
              r = Current.gql.query("DIVIDE(SUM(V(G(heat_production);useful_output*demand*sustainable_input_factor)),SUM(V(G(heat_production);useful_output*demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: sustainability_electricity_production" do
              r = Current.gql.query("DIVIDE(SUM(V(G(electricity_production);useful_output*demand*sustainable_input_factor)),SUM(V(G(electricity_production);useful_output*demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: share_of_renewable_electricity" do
              r = Current.gql.query("DIVIDE(SUM(V(G(electricity_production);primary_demand_of_sustainable)),SUM(V(G(electricity_production);primary_demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: share_of_renewable_energy" do
              r = Current.gql.query("DIVIDE(SUM(Q(final_electricity_sustainable),Q(final_sustainable_steam),Q(final_sustainable_demand),Q(ambient_heat_use)),SUM(V(INTERSECTION(G(final_demand_cbs),USE(energetic));demand),Q(ambient_heat_use)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: share_of_renewable_energy_in_procent" do
              r = Current.gql.query("PRODUCT(Q(share_of_renewable_energy),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 28 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5 
            end
            
              
            it "should run gquery: centrally_produced_electricity_industry" do
              r = Current.gql.query("SUM(V(electricity_industry_energetic;demand),NEG(SUM(V(small_chp_industry_energetic,large_chp_industry_energetic,biomass_chp_industry_energetic,bio_oil_chp_industry_energetic;output_of_electricity))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 58014115101 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 53808300000 
            end
            
              
            it "should run gquery: fossil_heat_old" do
              r = Current.gql.query("SUM(V(micro_chp_households_energetic,central_heating_households_energetic,heater_on_coal_households_energetic,heater_on_oil_households_energetic,heater_on_greengas_households_energetic,cv_hot_water_households_energetic,heatpump_boiler_using_city_heat_households_energetic;output_of_heat_carriers),NEG(V(heatpump_boiler_using_city_heat_households_energetic;input_of_electricity)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 206065092014 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 299582209395 
            end
            
              
            it "should run gquery: fossil_heat" do
              r = Current.gql.query("SUM(V(micro_chp_households_energetic,central_heating_households_energetic,heater_on_coal_households_energetic,heater_on_oil_households_energetic,heater_on_greengas_households_energetic,cv_hot_water_households_energetic,cooking_energy_demand_households_energetic,cooling_demand_households_energetic,heatpump_boiler_using_city_heat_households_energetic,hot_water_demand_households_energetic,gasheatpump_households_energetic;output_of_heat_carriers),NEG(V(micro_chp_households_energetic,central_heating_households_energetic,heater_on_coal_households_energetic,heater_on_oil_households_energetic,heater_on_greengas_households_energetic,cv_hot_water_households_energetic,cooking_energy_demand_households_energetic,cooling_demand_households_energetic,heatpump_boiler_using_city_heat_households_energetic,hot_water_demand_households_energetic,gasheatpump_households_energetic;input_of_electricity)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 210945346810 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 299582209395 
            end
            
              
            it "should run gquery: fossil_heat_other" do
              r = Current.gql.query("SUM(V(gas_burner_other_other_energetic,oil_burner_other_other_energetic,coal_burner_other_other_energetic,steam_hot_water_other_energetic;output_of_heat_carriers))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 21998276524 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 21348449209 
            end
            
              
            it "should run gquery: fossil_heat_industry" do
              r = Current.gql.query("SUM(V(coal_burner_industry_industry_energetic,oil_burner_industry_industry_energetic,gas_burner_industry_industry_energetic,greengas_burner_industry_industry_energetic,large_chp_industry_energetic,small_chp_industry_energetic;output_of_heat_carriers))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 508282467867 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 465883384394 
            end
            
              
            it "should run gquery: fossil_heat_agriculture" do
              r = Current.gql.query("SUM(V(oil_burner_agri_agriculture_energetic,gas_burner_agri_agriculture_energetic,steam_hot_water_agriculture_energetic;output_of_heat_carriers))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 58397692908 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 125939290611 
            end
            
              
            it "should run gquery: fossil_heat_production" do
              r = Current.gql.query("SUM(Q(fossil_heat),Q(fossil_heat_industry),Q(fossil_heat_agriculture),Q(fossil_heat_other))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 799623784111 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 912753333611 
            end
            
              
            it "should run gquery: biomass_heat" do
              r = Current.gql.query("V(heater_on_biomass_households_energetic;output_of_useable_heat)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 976050959 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6641990856 
            end
            
              
            it "should run gquery: geothermal_supply" do
              r = Current.gql.query("SUM(V(geothermal_agri_agriculture_energetic,geothermal_heat_energy,collective_geothermal_households_energetic;output_of_useable_heat+output_of_hot_water+output_of_steam_hot_water))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 25954530181 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: ambient_heat" do
              r = Current.gql.query("SUM(V(heatpump_boiler_households_energetic,heat_pump_with_chs_households_energetic,heatpump_households_energetic,heatpump_using_city_heat_households_energetic,solar_panel_for_heating_households_energetic,solar_panel_for_hot_water_households_energetic;output_of_heat_carriers))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 35699059613 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 986100681 
            end
            
              
            it "should run gquery: electricity_for_heat" do
              r = Current.gql.query("SUM(V(heatpump_boiler_households_energetic,electric_boiler_households_energetic,heat_pump_with_chs_households_energetic,electric_heater_households_energetic,heatpump_households_energetic,heatpump_using_city_heat_households_energetic,heatpump_addon_households_energetic,gasheatpump_households_energetic;input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 7814341588 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 12382187655 
            end
            
              
            it "should run gquery: centrally_produced_electricity_households" do
              r = Current.gql.query("SUM(V(electricity_households_energetic;demand),NEG(SUM(V(local_solar_pv_grid_connected_energy_energetic,collective_coal_chp_households_energetic,collective_gas_chp_households_energetic,collective_biomass_chp_households_energetic,local_wind_turbines_energy;output_of_electricity))),NEG(V(electricity_households_energetic;electricity_inversedflexible_output_link_value)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 21491656138 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 86794398378 
            end
            
              
            it "should run gquery: ambient_heat_agri" do
              r = Current.gql.query("SUM(V(heat_pump_with_CHS_agri_agriculture_energetic,geothermal_agri_agriculture_energetic;output_of_heat_carriers-input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 55905679724 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: biomass_heat_production" do
              r = Current.gql.query("SUM(V(biomass_burner_agri_agriculture_energetic,bio_oil_chp_industry_energetic,biomass_chp_industry_energetic,biomass_burner_industry_industry_energetic,greengas_burner_industry_industry_energetic,biomass_burner_other_other_energetic,heater_on_greengas_households_energetic,heater_on_biomass_households_energetic;output_of_heat_carriers))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 101574131028 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 23568236005 
            end
            
              
            it "should run gquery: imported_energy_share" do
              r = Current.gql.query("PRODUCT(Q(energy_dependence),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 71 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 23 
            end
            
              
            it "should run gquery: electricity_production" do
              r = Current.gql.query("SUM(V(G(electricity_production);output_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 484993630682 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 385461133713 
            end
            
              
            it "should run gquery: electricity_dependence" do
              r = Current.gql.query("DIVIDE(V(interconnection_energy;demand),SUM(Q(electricity_production),V(interconnection_energy;demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: imported_electricity" do
              r = Current.gql.query("V(electricity_import_export_energy;output_of_imported_electricity)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 17600910195 
            end
            
              
            it "should run gquery: imported_electricity_share" do
              r = Current.gql.query("PRODUCT(100,DIVIDE(Q(imported_electricity),SUM(Q(electricity_production),Q(imported_electricity))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4 
            end
            
              
            it "should run gquery: avg_total_cost_for_electricity_production_per_mj" do
              r = Current.gql.query("DIVIDE(SUM(V(G(electricity_production);total_cost_electricity)),SUM(V(G(electricity_production);output_of_electricity)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: electricity_import_total_cost" do
              r = Current.gql.query("PRODUCT(Q(imported_electricity),Q(avg_total_cost_for_electricity_production_per_mj))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 366957553 
            end
            
              
            it "should run gquery: total_cost_electricity" do
              r = Current.gql.query("SUM(Q(electricity_import_total_cost),Q(avg_total_cost_for_electricity_production_per_mj))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 366957553 
            end
            
              
            it "should run gquery: natural_gas_share" do
              r = Current.gql.query("V(energy_sector_gas_mixer_energy;natural_gas_input_conversion)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: greengas_share" do
              r = Current.gql.query("V(energy_sector_gas_mixer_energy;greengas_input_conversion)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: electricity_produced_from_natural_gas" do
              r = Current.gql.query("PRODUCT(GRAPH(electricity_produced_from_gas),Q(natural_gas_share))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 99921480579 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 249320065795 
            end
            
              
            it "should run gquery: electricity_produced_from_greengas" do
              r = Current.gql.query("PRODUCT(GRAPH(electricity_produced_from_gas),Q(greengas_share))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 33307160193 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5160043308 
            end
            
              
            it "should run gquery: wind_coastal_percentage_used" do
              r = Current.gql.query("PRODUCT(DIVIDE(V(wind_coastal_energy;total_land_use),AREA(onshore_suitable_for_wind)),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: wind_inland_percentage_used" do
              r = Current.gql.query("PRODUCT(DIVIDE(V(wind_inland_energy;total_land_use),AREA(onshore_suitable_for_wind)),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: wind_offshore_percentage_used" do
              r = Current.gql.query("PRODUCT(DIVIDE(V(wind_offshore_energy;total_land_use),AREA(onshore_suitable_for_wind)),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 7 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: land_pv_percentage_used" do
              r = Current.gql.query("PRODUCT(DIVIDE(V(solar_pv_central_production_energy_energetic;total_land_use),AREA(land_available_for_solar)),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: land_csp_percentage_used" do
              r = Current.gql.query("PRODUCT(DIVIDE(V(solar_csp_energy;total_land_use),AREA(land_available_for_solar)),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: roof_pv_percentage_used" do
              r = Current.gql.query("PRODUCT(DIVIDE(V(local_solar_pv_grid_connected_energy_energetic;total_land_use),AREA(roof_surface_available_pv)),100)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 50 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: electricity_produced_from_coal" do
              r = Current.gql.query("SUM(V(coal_conv_energy,coal_pwd_energy,coal_pwd_ccs_energy,coal_lignite_energy,coal_igcc_energy,coal_igcc_ccs_energy,coal_oxyfuel_ccs_energy,coal_chp_energy,collective_coal_chp_households_energetic,coal_chp_buildings_energetic,lignite_chp_energy;output_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 54508568252 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 77129133713 
            end
            
              
            it "should run gquery: chp_electricity_output" do
              r = Current.gql.query("DIVIDE(SUM(V(Q(all_chp_converters);output_of_electricity),NEG(V(coal_chp_energy;output_of_electricity))),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 172 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 111 
            end
            
              
            it "should run gquery: heatpumps_input_of_electricity" do
              r = Current.gql.query("DIVIDE(SUM(V(heatpump_households_energetic,heatpump_boiler_using_city_heat_households_energetic,heatpump_using_city_heat_households_energetic,heatpump_boiler_households_energetic,heat_pump_with_CHS_agri_agriculture_energetic,heat_pump_with_chs_households_energetic;input_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: geothermal_output_of_electricity" do
              r = Current.gql.query("DIVIDE(SUM(NEG(V(geothermal_electricity_energy;output_of_electricity)),V(geothermal_agri_agriculture_energetic;input_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: electricity_growth" do
              r = Current.gql.query("DIVIDE(SUM(V(electricity_excl_heating_demand_households_energetic,electricity_agriculture_energetic,electricity_industry_energetic,electricity_other_energetic;output_of_electricity),NEG(SUM(V(electricity_demand_lighting_households_energetic,heat_pump_with_CHS_agri_agriculture_energetic,geothermal_agri_agriculture_energetic;input_of_electricity)))),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 220 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 205 
            end
            
              
            it "should run gquery: electricity_for_heat_without_heatpumps" do
              r = Current.gql.query("DIVIDE(SUM(V(electric_heater_buildings_energetic,electric_boiler_households_energetic,electric_heater_households_energetic;input_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13 
            end
            
              
            it "should run gquery: all_biofuels_transport_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 44 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 15 
            end
            
              
            it "should run gquery: all_biofuels_agriculture_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_industry_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_other_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_households_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_energy_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_energy_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));input_of_biodiesel),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));input_of_biofuel),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));input_of_algae_diesel),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));input_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_industry_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));input_of_biodiesel),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));input_of_biofuel),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));input_of_algae_diesel),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));input_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_transport_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));output_of_biodiesel+output_of_biofuel+output_of_algae_diesel+output_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 44 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 15 
            end
            
              
            it "should run gquery: all_biofuels_agriculture_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));input_of_biodiesel),V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));input_of_biofuel),V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));input_of_algae_diesel),V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));input_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_other_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));input_of_biodiesel),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));input_of_biofuel),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));input_of_algae_diesel),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));input_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_households_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));input_of_biodiesel),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));input_of_biofuel),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));input_of_algae_diesel),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));input_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: conventional_gas_use_for_micro_chp_output" do
              r = Current.gql.query("SUM(DIVIDE(V(micro_chp_households_energetic;output_of_heat_carriers),V(gas_burner_other_other_energetic;useable_heat_output_conversion)),DIVIDE(V(micro_CHP_production_households;output_of_electricity),0.53))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 49848381415 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
              
              
              
              
              
              
            it "should run gquery: industry_biomass_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_biomass),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_biomass),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_bio_oil),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_bio_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 108 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 14 
            end
            
              
            it "should run gquery: industry_oil_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs)),INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_crude_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 701 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 645 
            end
            
              
            it "should run gquery: industry_uranium_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs)),INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_uranium)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 10 
            end
            
              
            it "should run gquery: industry_coal_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs)),INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_coal)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 117 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 146 
            end
            
              
            it "should run gquery: industry_lignite_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs)),INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_lignite)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: industry_waste_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs)),INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_waste)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 12 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 9 
            end
            
              
            it "should run gquery: industry_greengas_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs)),INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 73 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 7 
            end
            
              
            it "should run gquery: industry_primary_demand_without_gas" do
              r = Current.gql.query("SUM(Q(industry_biomass_primary_demand),Q(industry_oil_primary_demand),Q(industry_uranium_primary_demand),Q(industry_coal_primary_demand),Q(industry_lignite_primary_demand),Q(industry_waste_primary_demand),Q(industry_greengas_primary_demand),Q(all_biofuels_industry_primary),Q(industry_non_e_primary_demand),Q(all_biofuels_energy_primary),Q(industry_imported_e_primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1074 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 846 
            end
            
              
            it "should run gquery: households_primary_demand_without_gas" do
              r = Current.gql.query("SUM(Q(households_biomass_primary_demand),Q(households_oil_primary_demand),Q(households_uranium_primary_demand),Q(households_coal_primary_demand),Q(households_lignite_primary_demand),Q(households_waste_primary_demand),Q(households_non_e_primary_demand),Q(households_greengas_primary_demand),Q(all_biofuels_households_primary),Q(households_imported_e_primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 130 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 121 
            end
            
              
            it "should run gquery: households_biomass_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_biomass),V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_bio_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 15 
            end
            
              
            it "should run gquery: households_oil_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_crude_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
            end
            
              
            it "should run gquery: households_uranium_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_uranium)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 12 
            end
            
              
            it "should run gquery: households_coal_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_coal)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 89 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 61 
            end
            
              
            it "should run gquery: households_lignite_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_lignite)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: households_waste_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_waste)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11 
            end
            
              
            it "should run gquery: households_greengas_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
            end
            
              
            it "should run gquery: transport_biomass_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_biomass),V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_bio_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: transport_oil_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_crude_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 274 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 470 
            end
            
              
            it "should run gquery: transport_uranium_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_uranium)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: transport_coal_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_coal)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 12 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
            end
            
              
            it "should run gquery: transport_lignite_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_lignite)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: transport_waste_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_waste)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: transport_greengas_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 7 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_biomass_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_biomass)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 17 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_oil_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_crude_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11 
            end
            
              
            it "should run gquery: agriculture_uranium_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_uranium)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_coal_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_coal)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_lignite_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_lignite)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_waste_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_waste)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_greengas_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 14 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
            end
            
              
            it "should run gquery: other_oil_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_crude_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 19 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 19 
            end
            
              
            it "should run gquery: other_uranium_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_uranium)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: other_coal_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_coal)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
            end
            
              
            it "should run gquery: other_lignite_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_lignite)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: other_waste_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_waste)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: other_greengas_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: other_biomass_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_biomass),V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_bio_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 18 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 17 
            end
            
              
            it "should run gquery: transport_primary_demand_without_gas" do
              r = Current.gql.query("SUM(Q(transport_biomass_primary_demand),Q(transport_oil_primary_demand),Q(transport_uranium_primary_demand),Q(transport_coal_primary_demand),Q(transport_lignite_primary_demand),Q(transport_non_e_primary_demand),Q(transport_waste_primary_demand),Q(transport_greengas_primary_demand),Q(all_biofuels_transport_primary),Q(transport_imported_e_primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 384 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 492 
            end
            
              
            it "should run gquery: agriculture_primary_demand_without_gas" do
              r = Current.gql.query("SUM(Q(agriculture_biomass_primary_demand),Q(agriculture_oil_primary_demand),Q(agriculture_uranium_primary_demand),Q(agriculture_coal_primary_demand),Q(agriculture_lignite_primary_demand),Q(agriculture_waste_primary_demand),Q(agriculture_greengas_primary_demand),Q(agriculture_non_e_primary_demand),Q(all_biofuels_agriculture_primary),Q(agriculture_imported_e_primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 39 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13 
            end
            
              
            it "should run gquery: other_primary_demand_without_gas" do
              r = Current.gql.query("SUM(Q(other_biomass_primary_demand),Q(other_oil_primary_demand),Q(other_uranium_primary_demand),Q(other_coal_primary_demand),Q(other_lignite_primary_demand),Q(other_waste_primary_demand),Q(other_greengas_primary_demand),Q(all_biofuels_other_primary),Q(other_non_e_primary_demand),Q(other_imported_e_primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 42 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 38 
            end
            
              
            it "should run gquery: industry_non_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_electricity),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 61 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4 
            end
            
              
            it "should run gquery: households_non_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 29 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5 
            end
            
              
            it "should run gquery: transport_non_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 39 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_non_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: other_non_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
              
            it "should run gquery: households_heating_final_demand_total" do
              r = Current.gql.query("SUM(V(Q(households_heating_converters);demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 116246150501 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 256535348487 
            end
            
              
            it "should run gquery: households_heating_final_demand_electricity" do
              r = Current.gql.query("SUM(V(Q(households_heating_converters);input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6896084231 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5429977142 
            end
            
              
            it "should run gquery: households_heating_final_demand_biomass" do
              r = Current.gql.query("SUM(V(Q(households_heating_converters);input_of_biomass),V(Q(households_heating_converters);input_of_biofuel),V(Q(households_heating_converters);input_of_greengas),V(Q(households_heating_converters);input_of_biodiesel),V(Q(households_heating_converters);input_of_bio_ethanol),V(Q(households_heating_converters);input_of_algae_diesel),V(Q(households_heating_converters);input_of_biogas))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1190306047 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8099988849 
            end
            
              
            it "should run gquery: households_heating_final_demand_ambient" do
              r = Current.gql.query("SUM(V(Q(households_heating_converters);input_of_ambient_heat),V(Q(households_heating_converters);input_of_solar_radiation),V(collective_geothermal_households_energetic;input_of_steam_hot_water))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 39002424192 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 325799488 
            end
            
              
            it "should run gquery: households_heating_final_demand_fossil" do
              r = Current.gql.query("SUM(V(Q(households_heating_converters);input_of_coal),V(Q(households_heating_converters);input_of_crude_oil),V(Q(households_heating_converters);input_of_natural_gas),V(Q(households_heating_converters);input_of_diesel),V(Q(households_heating_converters);input_of_gasoline),V(Q(households_heating_converters);input_of_lignite),V(city_heating_network_energy_energetic;input_of_steam_hot_water))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 69157335452 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 242679583007 
            end
            
              
              
            it "should run gquery: ambient_heat_use" do
              r = Current.gql.query("SUM(V(ALL();input_of_ambient_heat))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 105109556216 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 325799488 
            end
            
              
            it "should run gquery: industry_imported_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));primary_demand_of_imported_electricity),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));primary_demand_of_imported_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 8 
            end
            
              
            it "should run gquery: other_imported_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(other),G(final_demand_cbs));primary_demand_of_imported_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: agriculture_imported_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(agriculture),G(final_demand_cbs));primary_demand_of_imported_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: households_imported_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(households),G(final_demand_cbs));primary_demand_of_imported_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 9 
            end
            
              
            it "should run gquery: transport_imported_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(transport),G(final_demand_cbs));primary_demand_of_imported_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: number_of_electric_cars" do
              r = Current.gql.query("DIVIDE(PRODUCT(VALUE(cars_kms_demand_transport_energetic;demand),VALUE(electric_cars_transport_energetic;car_kms_output_link_share)),AREA(km_per_car))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4114929 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_units_delta_electric_cars" do
              r = Current.gql.query("SUM(Q(number_of_electric_cars),NEG(VALUE(electric_cars_transport_energetic;peak_load_units_present)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4114929 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_wd_electric_cars" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_cars),V(electric_cars_transport_energetic;simult_wd),Q(peak_load_per_unit_electric_car))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_per_unit_electric_car" do
              r = Current.gql.query("PRODUCT(V(electric_cars_transport_energetic;typical_capacity_gross_in_mj_s),V(electric_cars_transport_energetic;electricity_input_conversion))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_we_electric_cars" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_cars),V(electric_cars_transport_energetic;simult_we),Q(peak_load_per_unit_electric_car))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3600 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_se_electric_cars" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_cars),V(electric_cars_transport_energetic;simult_se),Q(peak_load_per_unit_electric_car))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3600 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_sd_electric_cars" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_cars),V(electric_cars_transport_energetic;simult_sd),Q(peak_load_per_unit_electric_car))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_we_lv_total" do
              r = Current.gql.query("SUM(Q(peak_load_delta_we_electric_cars),Q(peak_load_delta_we_electric_trucks),Q(peak_load_delta_hh_heaters),Q(peak_load_delta_electric_boiler))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5617 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
            end
            
              
            it "should run gquery: peak_load_delta_wd_lv_total" do
              r = Current.gql.query("SUM(Q(peak_load_delta_wd_electric_cars),Q(peak_load_delta_wd_electric_trucks),Q(peak_load_delta_hh_heaters),Q(peak_load_delta_electric_boiler))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1982 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
            end
            
              
            it "should run gquery: peak_load_delta_se_lv_total" do
              r = Current.gql.query("SUM(Q(peak_load_delta_se_electric_cars),Q(peak_load_delta_se_electric_trucks),Q(peak_load_delta_hh_coolers),Q(peak_load_delta_electric_boiler))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3499 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -39 
            end
            
              
            it "should run gquery: peak_load_delta_sd_lv_total" do
              r = Current.gql.query("SUM(Q(peak_load_delta_sd_electric_cars),Q(peak_load_delta_sd_electric_trucks),Q(peak_load_delta_hh_coolers),Q(peak_load_delta_electric_boiler))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -135 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -39 
            end
            
              
            it "should run gquery: peak_load_delta_max_lv_net" do
              r = Current.gql.query("MAX(Q(peak_load_delta_demand_lv_total),Q(peak_load_delta_supply_lv_total))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11970 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
            end
            
              
            it "should run gquery: peak_load_delta_max_mv_lv_transformer" do
              r = Current.gql.query("PRODUCT(Q(peak_load_delta_max_lv_net),V(lv_electricity_network_energy_energetic;simult_wd))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11970 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
            end
            
              
            it "should run gquery: co2_cost_electricity_production" do
              r = Current.gql.query("PRODUCT(AREA(co2_price),SUM(1,NEG(AREA(co2_percentage_free))),Q(co2_emission_electricity_ex_import))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1058958410 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 127401632 
            end
            
              
            it "should run gquery: co2_emission_industry" do
              r = Current.gql.query("SUM(V(INTERSECTION(USE(energetic),INTERSECTION(SECTOR(industry),GROUP(final_demand_cbs)));primary_co2_emission))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 39222517353 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 50207917815 
            end
            
              
            it "should run gquery: co2_cost_industry" do
              r = Current.gql.query("PRODUCT(AREA(co2_price),SUM(1,NEG(AREA(co2_percentage_free))),Q(co2_emission_industry))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1181382222 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 113419686 
            end
            
              
            it "should run gquery: co2_per_mj_domestic_electricity_production" do
              r = Current.gql.query("DIVIDE(SUM(VALUE(GROUP(electricity_production);primary_co2_emission)),SUM(VALUE(GROUP(electricity_production);output_of_electricity)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: share_domestic_electrity_production" do
              r = Current.gql.query("MIN(1,SUM(1,NEG(DIVIDE(V(interconnection_energy;demand),V(hv_electricity_network_energy;demand)))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: industry_final_demand_gas_and_green_gas" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));input_of_natural_gas),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));input_of_natural_gas),V(INTERSECTION(SECTOR(industry),G(final_demand_cbs));input_of_greengas),V(INTERSECTION(SECTOR(energy),G(final_demand_cbs));input_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 445 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 274 
            end
            
              
            it "should run gquery: co2_emission_industry_without_electricity" do
              r = Current.gql.query("SUM(V(INTERSECTION(USE(energetic),INTERSECTION(SECTOR(industry),GROUP(final_demand_cbs)));primary_co2_emission),NEG(V(electricity_industry_energetic;primary_co2_emission)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 33275997562 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 39008176291 
            end
            
              
            it "should run gquery: co2_cost_industry_without_electricity" do
              r = Current.gql.query("PRODUCT(AREA(co2_price),SUM(1,NEG(AREA(co2_percentage_free))),Q(co2_emission_industry_without_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1002273046 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 88119470 
            end
            
              
            it "should run gquery: industy_chp_renewable_heat" do
              r = Current.gql.query("DIVIDE(SUM(V(bio_oil_chp_industry_energetic,biomass_chp_industry_energetic;output_of_heat_carriers)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 16 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
            end
            
              
            it "should run gquery: industy_chp_fossil_heat" do
              r = Current.gql.query("DIVIDE(SUM(V(small_chp_industry_energetic,large_chp_industry_energetic;output_of_heat_carriers)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 136 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 130 
            end
            
              
            it "should run gquery: industy_chp_renewable_electricity" do
              r = Current.gql.query("DIVIDE(SUM(V(bio_oil_chp_industry_energetic,biomass_chp_industry_energetic;output_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 16 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
            end
            
              
            it "should run gquery: industy_chp_fossil_electricity" do
              r = Current.gql.query("DIVIDE(SUM(V(small_chp_industry_energetic,large_chp_industry_energetic;output_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 72 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 69 
            end
            
              
            it "should run gquery: industry_other_heat" do
              r = Current.gql.query("SUM(V(heating_demand_industry_energetic;demand),NEG(SUM(V(small_chp_industry_energetic,large_chp_industry_energetic,biomass_chp_industry_energetic,bio_oil_chp_industry_energetic;output_of_heat_carriers))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 419076542047 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 359254990967 
            end
            
              
            it "should run gquery: number_of_electric_trucks" do
              r = Current.gql.query("DIVIDE(PRODUCT(VALUE(truck_kms_demand_transport_energetic;demand),VALUE(electric_trucks_transport_energetic;truck_kms_output_link_share)),AREA(km_per_truck))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 19533 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_units_delta_agri_heat_pumps_chs" do
              r = Current.gql.query("V(heat_pump_with_CHS_agri_agriculture_energetic;number_of_heat_plants_future-peak_load_units_present)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1854 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_per_unit_agri_heat_pump_chs" do
              r = Current.gql.query("PRODUCT(V(heat_pump_with_CHS_agri_agriculture_energetic;typical_capacity_gross_in_mj_s),V(heat_pump_with_CHS_agri_agriculture_energetic;electricity_input_conversion))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_wd_agri_heat_pumps_chs" do
              r = Current.gql.query("PRODUCT(Q(peak_load_per_unit_agri_heat_pump_chs),V(heat_pump_with_CHS_agri_agriculture_energetic;simult_wd),Q(peak_load_units_delta_agri_heat_pumps_chs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 403 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_sd_agri_heat_pumps_chs" do
              r = Current.gql.query("PRODUCT(Q(peak_load_per_unit_agri_heat_pump_chs),V(heat_pump_with_CHS_agri_agriculture_energetic;simult_sd),Q(peak_load_units_delta_agri_heat_pumps_chs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_we_agri_heat_pumps_chs" do
              r = Current.gql.query("PRODUCT(Q(peak_load_per_unit_agri_heat_pump_chs),V(heat_pump_with_CHS_agri_agriculture_energetic;simult_we),Q(peak_load_units_delta_agri_heat_pumps_chs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 403 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_se_agri_heat_pumps_chs" do
              r = Current.gql.query("PRODUCT(Q(peak_load_per_unit_agri_heat_pump_chs),V(heat_pump_with_CHS_agri_agriculture_energetic;simult_se),Q(peak_load_units_delta_agri_heat_pumps_chs))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_local_solar_pv_grid_connected" do
              r = Current.gql.query("PRODUCT(V(local_solar_pv_grid_connected_energy_energetic;typical_capacity_gross_in_mj_s),Q(peak_load_units_delta_local_solar_pv_grid_connected))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11065 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_hh_micro_chp" do
              r = Current.gql.query("PRODUCT(PRODUCT(V(micro_chp_households_energetic;simult_we*1/1000),PRODUCT(V(micro_chp_households_energetic;share_of_heat_from_steam_hot_water_households_energetic),V(heat_from_steam_hot_water_households_energetic;share_of_heating_demand_households_energetic))),AREA(number_households))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 905 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_supply_lv_total" do
              r = Current.gql.query("SUM(Q(peak_load_delta_hh_micro_chp),Q(peak_load_delta_local_solar_pv_grid_connected))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11970 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_units_delta_electric_trucks" do
              r = Current.gql.query("SUM(Q(number_of_electric_trucks),NEG(VALUE(electric_trucks_transport_energetic;peak_load_units_present)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 19533 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_per_unit_electric_truck" do
              r = Current.gql.query("PRODUCT(V(electric_trucks_transport_energetic;typical_capacity_gross_in_mj_s),V(electric_trucks_transport_energetic;electricity_input_conversion))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_wd_electric_trucks" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_trucks),V(electric_trucks_transport_energetic;simult_wd),Q(peak_load_per_unit_electric_truck))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_we_electric_trucks" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_trucks),V(electric_trucks_transport_energetic;simult_we),Q(peak_load_per_unit_electric_truck))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 34 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_se_electric_trucks" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_trucks),V(electric_trucks_transport_energetic;simult_se),Q(peak_load_per_unit_electric_truck))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 34 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_sd_electric_trucks" do
              r = Current.gql.query("PRODUCT(Q(peak_load_units_delta_electric_trucks),V(electric_trucks_transport_energetic;simult_sd),Q(peak_load_per_unit_electric_truck))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: peak_load_delta_on_mv_hv_transformer" do
              r = Current.gql.query("PRODUCT(SUM(V(Q(plants_connected_to_mv_hv_transformer);peak_load_capacity_delta_for_mv_hv)),0.75)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4484 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -239 
            end
            
              
            it "should run gquery: max_percentage_heat_network_industry" do
              r = Current.gql.query("MIN(1,DIVIDE(SUM(V(small_chp_industry_energetic,large_chp_industry_energetic,biomass_chp_industry_energetic,bio_oil_chp_industry_energetic;output_of_steam_hot_water)),V(heating_demand_industry_energetic;demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: high_voltage_capacity_delta" do
              r = Current.gql.query("SUM(MAX(V(Q(high_voltage_electricity_production);delta_in_capacity_in_mj_s),0),MAX(V(interconnection_energy;demand/3600/8760/capacity_factor-4200),V(interconnection_energy;demand/3600/8760/capacity_factor*-1-4200),0))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11777 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: decentral_capacity_delta" do
              r = Current.gql.query("SUM(V(Q(plants_connected_to_mv_hv_transformer);delta_in_capacity_in_mj_s),V(chp_agri_agriculture_energetic;delta_in_capacity_in_mj_s))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 9868 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: total_capacity_delta" do
              r = Current.gql.query("SUM(Q(decentral_capacity_delta),Q(high_voltage_capacity_delta))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 21645 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
              
            it "should run gquery: investment_cost_hv_net_total" do
              r = Current.gql.query("IF(EQUALS(AREA(area),nl),SUM(IF(Q(check_capacity_buffer_total),IF(Q(check_capacity_buffer_decentral),SUM(PRODUCT(Q(high_voltage_capacity_delta),0.20),PRODUCT(Q(decentral_capacity_delta),0.25)),PRODUCT(Q(total_capacity_delta),0.20)),0),Q(peak_load_investment_wind_offshore)),0)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 9039 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_hv_grid_per_year" do
              r = Current.gql.query("IF(EQUALS(AREA(area),nl),SUM(DIVIDE(Q(investment_cost_hv_net_total),V(hv_electricity_network_energy;technical_lifetime)),PRODUCT(DIVIDE(Q(investment_cost_hv_net_total),2),V(hv_electricity_network_energy;wacc)),DIVIDE(Q(operational_costs_hv_net),MILLIONS)),0)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 508 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_units_delta_local_solar_pv_grid_connected" do
              r = Current.gql.query("V(local_solar_pv_grid_connected_energy_energetic;number_of_plants_future-peak_load_units_present)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11065 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_lv_net_total" do
              r = Current.gql.query("PRODUCT(Q(needed_expansion_ls_net),V(lv_electricity_network_energy_energetic;overnight_investment_ex_co2_per_mj_s))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_mv_lv_transformer_total" do
              r = Current.gql.query("PRODUCT(Q(needed_expansion_ms_ls_trafo),V(lv_mv_transformer_energy;overnight_investment_ex_co2_per_mj_s))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_max_mv_distribution_net" do
              r = Current.gql.query("MAX(Q(peak_load_delta_demand_mv_distribution_net),Q(peak_load_delta_supply_mv_distribution_net))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 7835 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 595 
            end
            
              
            it "should run gquery: investment_cost_mv_distribution_net_total" do
              r = Current.gql.query("PRODUCT(Q(needed_expansion_ms_distribution),V(mv_distribution_network_energy_energetic;overnight_investment_ex_co2_per_mj_s))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_max_mv_transport_net" do
              r = Current.gql.query("PRODUCT(Q(peak_load_delta_max_mv_distribution_net),V(mv_distribution_network_energy_energetic;simult_wd))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 7835 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 595 
            end
            
              
            it "should run gquery: investment_cost_mv_transport_net_total" do
              r = Current.gql.query("PRODUCT(Q(needed_expansion_ms_transport),V(mv_transport_network_energy;overnight_investment_ex_co2_per_mj_s))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_max_hv_mv_transformer" do
              r = Current.gql.query("MAX(Q(peak_load_delta_demand_hv_mv_transformer),Q(peak_load_delta_supply_hv_mv_transformer))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 12320 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 552 
            end
            
              
            it "should run gquery: investment_cost_lv_net_per_year" do
              r = Current.gql.query("SUM(DIVIDE(Q(investment_cost_lv_net_total),V(lv_electricity_network_energy_energetic;technical_lifetime)),PRODUCT(DIVIDE(Q(investment_cost_lv_net_total),2),V(lv_electricity_network_energy_energetic;wacc)),Q(operational_costs_lv_net))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_mv_lv_transformer_per_year" do
              r = Current.gql.query("SUM(DIVIDE(Q(investment_cost_mv_lv_transformer_total),V(lv_mv_transformer_energy;technical_lifetime)),PRODUCT(DIVIDE(Q(investment_cost_mv_lv_transformer_total),2),V(lv_mv_transformer_energy;wacc)),Q(operational_costs_lv_mv_transformer))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_lv_grid_per_year" do
              r = Current.gql.query("DIVIDE(SUM(Q(investment_cost_mv_lv_transformer_per_year),Q(investment_cost_lv_net_per_year)),MILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_mv_grid_per_year" do
              r = Current.gql.query("DIVIDE(SUM(Q(investment_cost_mv_transport_net_per_year),Q(investment_cost_mv_distribution_net_per_year),Q(investment_cost_hv_mv_transformer_per_year)),MILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 113 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_hv_mv_transformer_total" do
              r = Current.gql.query("PRODUCT(Q(needed_expansion_hs_ms_trafo),V(mv_hv_transformer_energy;overnight_investment_ex_co2_per_mj_s))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1120571772 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_mv_distribution_net_per_year" do
              r = Current.gql.query("SUM(DIVIDE(Q(investment_cost_mv_distribution_net_total),V(mv_distribution_network_energy_energetic;technical_lifetime)),PRODUCT(DIVIDE(Q(investment_cost_mv_distribution_net_total),2),V(mv_distribution_network_energy_energetic;wacc)),Q(operational_costs_mv_distribution_network))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: investment_cost_hv_mv_transformer_per_year" do
              r = Current.gql.query("SUM(DIVIDE(Q(investment_cost_hv_mv_transformer_total),V(mv_hv_transformer_energy;technical_lifetime)),PRODUCT(DIVIDE(Q(investment_cost_hv_mv_transformer_total),2),V(mv_hv_transformer_energy;wacc)),Q(operational_costs_hv_mv_transformer))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 113365158 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: max_percentage_heat_network_agriculture" do
              r = Current.gql.query("MIN(1,DIVIDE(SUM(V(chp_agri_agriculture_energetic;output_of_steam_hot_water),V(heat_network_industry_energetic;demand)),V(heating_demand_agriculture_energetic;demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: investment_cost_mv_transport_net_per_year" do
              r = Current.gql.query("SUM(DIVIDE(Q(investment_cost_mv_transport_net_total),V(mv_transport_network_energy;technical_lifetime)),PRODUCT(DIVIDE(Q(investment_cost_mv_transport_net_total),2),V(mv_transport_network_energy;wacc)),Q(operational_costs_mv_transport_network))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: peak_load_delta_hh_heaters" do
              r = Current.gql.query("PRODUCT(SUM(V(Q(hh_heaters);simult_we*electricity_input_conversion*typical_capacity_gross_in_mj_s*share_of_heating_demand_households_energetic)),AREA(number_households))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2118 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 956 
            end
            
              
            it "should run gquery: annual_netwerk_cost" do
              r = Current.gql.query("DIVIDE(SUM(SUM(MAX(AREA(annual_infrastructure_cost_electricity),0),MAX(AREA(annual_infrastructure_cost_gas),0)),Q(investment_cost_lv_grid_per_year),Q(investment_cost_mv_grid_per_year),Q(investment_cost_hv_grid_per_year)),1000)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3 
            end
            
              
            it "should run gquery: number_electric_cars" do
              r = Current.gql.query("DIVIDE(V(electric_cars_transport_energetic;output_of_car_kms),AREA(km_per_car))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4114929 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_units_delta_agri_chp" do
              r = Current.gql.query("V(chp_agri_agriculture_energetic;number_of_plants_future-peak_load_units_present)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3000 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2920 
            end
            
              
            it "should run gquery: peak_load_per_unit_agri_chp" do
              r = Current.gql.query("PRODUCT(V(chp_agri_agriculture_energetic;typical_capacity_gross_in_mj_s),V(chp_agri_agriculture_energetic;electricity_output_conversion))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: peak_load_delta_demand_lv_total" do
              r = Current.gql.query("MAX(Q(peak_load_delta_we_lv_total),Q(peak_load_delta_wd_lv_total),Q(peak_load_delta_se_lv_total),Q(peak_load_delta_sd_lv_total))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5617 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 916 
            end
            
              
            it "should run gquery: peak_load_delta_demand_plants_connected_to_mv_distribution_net" do
              r = Current.gql.query("SUM(MAX(PRODUCT(SUM(V(INTERSECTION(GROUP(heat_production),Q(demand_plants_connected_to_mv_distribution_net));simult_we*electricity_input_conversion*typical_capacity_gross_in_mj_s*[number_of_heat_plants_future-peak_load_units_present])),1),PRODUCT(SUM(V(INTERSECTION(GROUP(heat_production),Q(demand_plants_connected_to_mv_distribution_net));simult_sd*electricity_input_conversion*typical_capacity_gross_in_mj_s*[number_of_heat_plants_future-peak_load_units_present])),1)),PRODUCT(SUM(V(INTERSECTION(GROUP(electricity_production),Q(demand_plants_connected_to_mv_distribution_net));simult_we*electricity_input_conversion*typical_capacity_gross_in_mj_s*[number_of_plants_future-peak_load_units_present])),1))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 409 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2 
            end
            
              
            it "should run gquery: peak_load_delta_supply_plants_connected_to_mv_distribution_net" do
              r = Current.gql.query("SUM(PRODUCT(SUM(V(INTERSECTION(GROUP(heat_production),Q(supply_plants_connected_to_mv_distribution_net));simult_we*electricity_output_conversion*typical_capacity_gross_in_mj_s*[number_of_heat_plants_future-peak_load_units_present])),1),PRODUCT(SUM(V(INTERSECTION(GROUP(electricity_production),Q(supply_plants_connected_to_mv_distribution_net));simult_we*electricity_output_conversion*typical_capacity_gross_in_mj_s*[number_of_plants_future-peak_load_units_present])),1))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 653 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 595 
            end
            
              
            it "should run gquery: peak_load_delta_supply_mv_distribution_net" do
              r = Current.gql.query("SUM(PRODUCT(Q(peak_load_delta_supply_lv_total),V(lv_electricity_network_energy_energetic;simult_wd),V(lv_mv_transformer_energy;simult_wd)),Q(peak_load_delta_supply_plants_connected_to_mv_distribution_net))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 7835 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 595 
            end
            
              
            it "should run gquery: peak_load_delta_demand_mv_distribution_net" do
              r = Current.gql.query("SUM(PRODUCT(Q(peak_load_delta_demand_lv_total),V(lv_electricity_network_energy_energetic;simult_wd),V(lv_mv_transformer_energy;simult_wd)),Q(peak_load_delta_demand_plants_connected_to_mv_distribution_net))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3779 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 552 
            end
            
              
              
              
            it "should run gquery: peak_load_delta_supply_hv_mv_transformer" do
              r = Current.gql.query("SUM(PRODUCT(Q(peak_load_delta_supply_mv_distribution_net),V(mv_distribution_network_energy_energetic;simult_wd),V(mv_transport_network_energy;simult_wd)),Q(peak_load_delta_on_mv_hv_transformer))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 12320 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 356 
            end
            
              
            it "should run gquery: peak_load_delta_demand_hv_mv_transformer" do
              r = Current.gql.query("PRODUCT(Q(peak_load_delta_demand_mv_distribution_net),V(mv_distribution_network_energy_energetic;simult_wd),V(mv_transport_network_energy;simult_wd))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3779 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 552 
            end
            
              
            it "should run gquery: cost_electricity_export" do
              r = Current.gql.query("PRODUCT(Q(cost_domestic_electricity),INVERSE(SUM(V(GROUP(electricity_production);output_of_electricity))),V(electricity_export_energy;demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6577976158 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1820 
            end
            
              
            it "should run gquery: dependency_share_uranium" do
              r = Current.gql.query("DIVIDE(SUM(V(uranium_import_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_gas" do
              r = Current.gql.query("DIVIDE(SUM(V(gas_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_oil" do
              r = Current.gql.query("DIVIDE(SUM(V(oil_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_biomass" do
              r = Current.gql.query("DIVIDE(SUM(V(biomass_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_coal" do
              r = Current.gql.query("DIVIDE(SUM(V(coal_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_electricity" do
              r = Current.gql.query("DIVIDE(SUM(V(electricity_import_export_energy;demand),V(electricity_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_biomass_group" do
              r = Current.gql.query("SUM(Q(dependency_share_biomass),Q(dependency_share_bio_diesel),Q(dependency_share_bio_ethanol),Q(dependency_share_biofuel),Q(dependency_share_greengas),Q(dependency_share_bio_oil),Q(dependency_share_waste),Q(dependency_share_algue_diesel))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_biofuel" do
              r = Current.gql.query("DIVIDE(SUM(V(biofuel_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_bio_diesel" do
              r = Current.gql.query("DIVIDE(SUM(V(bio_diesel_import_export_transport;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_bio_ethanol" do
              r = Current.gql.query("DIVIDE(SUM(V(bio_ethanol_import_export_transport;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_greengas" do
              r = Current.gql.query("DIVIDE(SUM(V(greengas_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_bio_oil" do
              r = Current.gql.query("DIVIDE(SUM(V(bio_oil_import_export_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_waste" do
              r = Current.gql.query("DIVIDE(SUM(V(waste_import_export_environment;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_algue_diesel" do
              r = Current.gql.query("DIVIDE(SUM(V(algue_diesel_import_export_transport_energetic;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_diesel" do
              r = Current.gql.query("DIVIDE(SUM(V(diesel_import_export_transport;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_gasoline" do
              r = Current.gql.query("DIVIDE(SUM(V(gasoline_import_export_transport;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_kerosine" do
              r = Current.gql.query("DIVIDE(SUM(V(kerosine_import_export_transport;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_lpg" do
              r = Current.gql.query("DIVIDE(SUM(V(lpg_import_export_transport;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_oil_group" do
              r = Current.gql.query("SUM(Q(dependency_share_oil),Q(dependency_share_diesel),Q(dependency_share_gasoline),Q(dependency_share_kerosine),Q(dependency_share_lpg),Q(dependency_share_lng))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: dependency_share_lng" do
              r = Current.gql.query("DIVIDE(SUM(V(lng_import_energy;demand)),SUM(V(G(primary_energy_demand);demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: households_hot_water_fossil" do
              r = Current.gql.query("SUM(V(Q(households_hot_water_converters);input_of_coal),V(Q(households_hot_water_converters);input_of_crude_oil),V(Q(households_hot_water_converters);input_of_natural_gas),V(Q(households_hot_water_converters);input_of_diesel),V(Q(households_hot_water_converters);input_of_gasoline),V(Q(households_hot_water_converters);input_of_lignite))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 180714540889 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 74973613123 
            end
            
              
            it "should run gquery: households_hot_water_biomass" do
              r = Current.gql.query("SUM(V(Q(households_hot_water_converters);input_of_biomass),V(Q(households_hot_water_converters);input_of_biofuel),V(Q(households_hot_water_converters);input_of_greengas),V(Q(households_hot_water_converters);input_of_biodiesel),V(Q(households_hot_water_converters);input_of_bio_ethanol),V(Q(households_hot_water_converters);input_of_algae_diesel),V(Q(households_hot_water_converters);input_of_biogas))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: households_hot_water_ambient" do
              r = Current.gql.query("SUM(V(Q(households_hot_water_converters);input_of_ambient_heat),V(Q(households_hot_water_converters);input_of_solar_radiation))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3673029429 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 603601398 
            end
            
              
            it "should run gquery: households_hot_water_electricity" do
              r = Current.gql.query("SUM(V(Q(households_hot_water_converters);input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 918257357 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6952210513 
            end
            
              
              
            it "should run gquery: households_cooling_electricity" do
              r = Current.gql.query("SUM(V(Q(households_cooling_converters);input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3015494504 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2192817731 
            end
            
              
            it "should run gquery: households_cooling_ambient" do
              r = Current.gql.query("SUM(V(Q(households_cooling_converters);input_of_ambient_cold))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6032387012 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4386652068 
            end
            
              
            it "should run gquery: households_cooling_gas" do
              r = Current.gql.query("SUM(V(Q(households_cooling_converters);input_of_natural_gas))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: cooling_from_electricity" do
              r = Current.gql.query("PRODUCT(DIVIDE(Q(households_cooling_electricity),SUM(V(Q(households_cooling_converters);demand))),V(cooling_demand_households_energetic;input_of_cooling))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 3015494504 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2192817731 
            end
            
              
            it "should run gquery: electricity_for_heat_buildings" do
              r = Current.gql.query("SUM(V(electric_heater_buildings_energetic,heatpump_ts_buildings_energetic,biomass_chp_buildings_energetic,coal_chp_buildings_energetic,gas_chp_buildings_energetic;input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1973680881 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1384088932 
            end
            
              
            it "should run gquery: buildings_cooling_gas" do
              r = Current.gql.query("PRODUCT(DIVIDE(SUM(V(Q(buildings_cooling_converters);input_of_natural_gas)),SUM(V(Q(buildings_cooling_converters);demand))),V(cooling_buildings_energetic;input_of_cooling))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: buildings_cooling_electricity" do
              r = Current.gql.query("PRODUCT(DIVIDE(SUM(V(Q(buildings_cooling_converters);input_of_electricity)),SUM(V(Q(buildings_cooling_converters);demand))),V(cooling_buildings_energetic;input_of_cooling))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5319932811 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 11235530036 
            end
            
              
            it "should run gquery: buildings_cooling_ambient" do
              r = Current.gql.query("PRODUCT(DIVIDE(SUM(V(Q(buildings_cooling_converters);input_of_ambient_cold)),SUM(V(Q(buildings_cooling_converters);demand))),V(cooling_buildings_energetic;input_of_cooling))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13299850648 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 28088864416 
            end
            
              
            it "should run gquery: buildings_heating_final_demand_ambient" do
              r = Current.gql.query("SUM(V(Q(buildings_heating_converters);input_of_ambient_carriers))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 18009858026 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: buildings_heating_final_demand_biomass" do
              r = Current.gql.query("SUM(V(Q(buildings_heating_converters);input_of_biomass),V(Q(buildings_heating_converters);input_of_biofuel),V(Q(buildings_heating_converters);input_of_greengas),V(Q(buildings_heating_converters);input_of_biodiesel),V(Q(buildings_heating_converters);input_of_bio_ethanol),V(Q(buildings_heating_converters);input_of_algae_diesel),V(Q(buildings_heating_converters);input_of_biogas))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 10351519573 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13840876647 
            end
            
              
            it "should run gquery: buildings_heating_final_demand_fossil" do
              r = Current.gql.query("SUM(V(Q(buildings_heating_converters);input_of_coal),V(Q(buildings_heating_converters);input_of_crude_oil),V(Q(buildings_heating_converters);input_of_natural_gas),V(Q(buildings_heating_converters);input_of_diesel),V(Q(buildings_heating_converters);input_of_gasoline),V(Q(buildings_heating_converters);input_of_lignite),V(Q(buildings_heating_converters);input_of_gasmix),V(local_heat_network_buildings_energetic;input_of_steam_hot_water))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 16862573599 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 123183881076 
            end
            
              
            it "should run gquery: buildings_heating_final_demand_total" do
              r = Current.gql.query("SUM(V(Q(buildings_heating_converters);demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 47197632081 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 138408846657 
            end
            
              
            it "should run gquery: buildings_heating_final_demand_electricity" do
              r = Current.gql.query("SUM(V(Q(buildings_heating_converters);input_of_electricity))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1973680881 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1384088932 
            end
            
              
              
            it "should run gquery: buildings_share_of_heat_offices" do
              r = Current.gql.query("DIVIDE(V(heating_offices_current_insulation_buildings_energetic;demand),V(heat_demand_before_recirculation_buildings_energetic;demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: buildings_share_of_heat_other" do
              r = Current.gql.query("DIVIDE(V(heating_other_buildings_energetic;demand),V(heat_demand_before_recirculation_buildings_energetic;demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: buildings_share_of_heat_schools" do
              r = Current.gql.query("DIVIDE(V(heating_schools_current_insulation_buildings_energetic;demand),V(heat_demand_before_recirculation_buildings_energetic;demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: operational_costs_hv_net" do
              r = Current.gql.query("PRODUCT(DIVIDE(95853194,V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s)),SUM(V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s),SUM(MAX(SUM(Q(peak_load_delta_max_hv_mv_transformer),V(mv_hv_transformer_energy;typical_capacity_effective_in_mj_s)),V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s)),NEG(V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s))),NEG(V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 33555258 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: operational_costs_hv_mv_transformer" do
              r = Current.gql.query("PRODUCT(DIVIDE(155783851,V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s)),SUM(MAX(SUM(Q(peak_load_delta_max_hv_mv_transformer),V(mv_hv_transformer_energy;typical_capacity_effective_in_mj_s)),V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s)),NEG(V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 54535140 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: operational_costs_mv_transport_network" do
              r = Current.gql.query("PRODUCT(DIVIDE(155783851,V(mv_transport_network_energy;typical_capacity_gross_in_mj_s)),SUM(MAX(SUM(Q(peak_load_delta_max_mv_transport_net),V(mv_transport_network_energy;typical_capacity_effective_in_mj_s)),V(mv_transport_network_energy;typical_capacity_gross_in_mj_s)),NEG(V(mv_transport_network_energy;typical_capacity_gross_in_mj_s))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: operational_costs_mv_distribution_network" do
              r = Current.gql.query("PRODUCT(DIVIDE(155783851,V(mv_distribution_network_energy_energetic;typical_capacity_gross_in_mj_s)),SUM(MAX(SUM(Q(peak_load_delta_max_mv_distribution_net),V(mv_distribution_network_energy_energetic;typical_capacity_effective_in_mj_s)),V(mv_distribution_network_energy_energetic;typical_capacity_gross_in_mj_s)),NEG(V(mv_distribution_network_energy_energetic;typical_capacity_gross_in_mj_s))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: operational_costs_lv_mv_transformer" do
              r = Current.gql.query("PRODUCT(DIVIDE(233676777,V(lv_mv_transformer_energy;typical_capacity_gross_in_mj_s)),SUM(MAX(SUM(Q(peak_load_delta_max_mv_lv_transformer),V(lv_mv_transformer_energy;typical_capacity_effective_in_mj_s)),V(lv_mv_transformer_energy;typical_capacity_gross_in_mj_s)),NEG(V(lv_mv_transformer_energy;typical_capacity_gross_in_mj_s))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: operational_costs_lv_net" do
              r = Current.gql.query("PRODUCT(DIVIDE(233676777,V(lv_electricity_network_energy_energetic;typical_capacity_gross_in_mj_s)),SUM(MAX(SUM(Q(peak_load_delta_max_lv_net),V(lv_electricity_network_energy_energetic;typical_capacity_effective_in_mj_s)),V(lv_electricity_network_energy_energetic;typical_capacity_gross_in_mj_s)),NEG(V(lv_electricity_network_energy_energetic;typical_capacity_gross_in_mj_s))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: needed_expansion_ls_net" do
              r = Current.gql.query("SUM(MAX(SUM(Q(peak_load_delta_max_lv_net),V(lv_electricity_network_energy_energetic;typical_capacity_effective_in_mj_s)),V(lv_electricity_network_energy_energetic;typical_capacity_gross_in_mj_s)),NEG(V(lv_electricity_network_energy_energetic;typical_capacity_gross_in_mj_s)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: needed_expansion_ms_ls_trafo" do
              r = Current.gql.query("SUM(MAX(SUM(Q(peak_load_delta_max_mv_lv_transformer),V(lv_mv_transformer_energy;typical_capacity_effective_in_mj_s)),V(lv_mv_transformer_energy;typical_capacity_gross_in_mj_s)),NEG(V(lv_mv_transformer_energy;typical_capacity_gross_in_mj_s)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: needed_expansion_ms_distribution" do
              r = Current.gql.query("SUM(MAX(SUM(Q(peak_load_delta_max_mv_distribution_net),V(mv_distribution_network_energy_energetic;typical_capacity_effective_in_mj_s)),V(mv_distribution_network_energy_energetic;typical_capacity_gross_in_mj_s)),NEG(V(mv_distribution_network_energy_energetic;typical_capacity_gross_in_mj_s)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: needed_expansion_ms_transport" do
              r = Current.gql.query("SUM(MAX(SUM(Q(peak_load_delta_max_mv_transport_net),V(mv_transport_network_energy;typical_capacity_effective_in_mj_s)),V(mv_transport_network_energy;typical_capacity_gross_in_mj_s)),NEG(V(mv_transport_network_energy;typical_capacity_gross_in_mj_s)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: needed_expansion_hs_ms_trafo" do
              r = Current.gql.query("SUM(MAX(SUM(Q(peak_load_delta_max_hv_mv_transformer),V(mv_hv_transformer_energy;typical_capacity_effective_in_mj_s)),V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s)),NEG(V(mv_hv_transformer_energy;typical_capacity_gross_in_mj_s)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 7470 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
              
            it "should run gquery: peak_load_delta_hh_coolers" do
              r = Current.gql.query("MAX(PRODUCT(SUM(SUM(V(Q(hh_coolers);simult_sd*electricity_input_conversion*typical_capacity_gross_in_mj_s*share_of_cooling_demand_households_energetic)),NEG(V(airco_households_energetic;simult_sd*electricity_input_conversion*typical_capacity_gross_in_mj_s*1))),AREA(number_households)),0)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: share_of_heaters_with_combi" do
              r = Current.gql.query("SUM(V(heater_on_biomass_households_energetic,central_heating_households_energetic,heatpump_households_energetic;share_of_heating_demand_households_energetic),SUM(PRODUCT(V(micro_chp_households_energetic;share_of_heat_from_steam_hot_water_households_energetic),V(heat_from_steam_hot_water_households_energetic;share_of_heating_demand_households_energetic)),PRODUCT(V(city_heating_network_energy_energetic;share_of_heat_from_steam_hot_water_households_energetic),V(heat_from_steam_hot_water_households_energetic;share_of_heating_demand_households_energetic))))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: import_of_biomassa_group" do
              r = Current.gql.query("DIVIDE(SUM(V(biofuel_import_export_energy,bio_diesel_import_export_transport,bio_ethanol_import_export_transport,greengas_import_export_energy,bio_oil_import_export_energyalgue_diesel_import_export_transport_energetic;demand)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 86 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6 
            end
            
              
            it "should run gquery: peak_load_delta_electric_boiler" do
              r = Current.gql.query("PRODUCT(SUM(V(electric_boiler_households_energetic;simult_we*electricity_input_conversion*typical_capacity_gross_in_mj_s*share_of_hot_water_demand_households_energetic),NEG(V(electric_boiler_households_energetic;simult_we*electricity_input_conversion*typical_capacity_gross_in_mj_s*109718/1000000))),AREA(number_households))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -135 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == -39 
            end
            
              
              
            it "should run gquery: number_of_heatpumps" do
              r = Current.gql.query("SUM(V(heatpump_households_energetic,heatpump_boiler_using_city_heat_households_energetic,heatpump_using_city_heat_households_energetic,heatpump_boiler_households_energetic,heat_pump_with_CHS_agri_agriculture_energetic,heat_pump_with_chs_households_energetic;number_of_heat_plants_future))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1176005 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 36193 
            end
            
              
            it "should run gquery: electricity_export_losses" do
              r = Current.gql.query("SUM(PRODUCT(V(electricity_export_energy;demand),INVERSE(V(hv_electricity_network_energy;electricity_output_conversion))),NEG(V(electricity_export_energy;demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 9144670194 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6060 
            end
            
              
            it "should run gquery: final_electricity_sustainable" do
              r = Current.gql.query("SUM(INVALID_TO_ZERO(V(INTERSECTION(G(final_demand_electricity),USE(energetic));primary_demand_of_sustainable*demand/primary_demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 188724476835 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 33738718370 
            end
            
              
            it "should run gquery: final_sustainable_demand" do
              r = Current.gql.query("SUM(V(INTERSECTION(G(final_demand_cbs),USE(energetic));output_of_biomass+output_of_biofuel+output_of_greengas+output_of_biodiesel+output_of_bio_ethanol+output_of_bio_oil+output_of_water+output_of_algae_diesel+output_of_biogas))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 174349359221 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 69994956250 
            end
            
              
              
            it "should run gquery: all_biofuels_buildings_final" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));input_of_biodiesel),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));input_of_biofuel),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));input_of_algae_diesel),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));input_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: all_biofuels_buildings_primary" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_biodiesel),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_biofuel),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_algae_diesel),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_bio_ethanol)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: buildings_biomass_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_biomass),V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_bio_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 20 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 39 
            end
            
              
            it "should run gquery: buildings_oil_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_crude_oil)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 34 
            end
            
              
            it "should run gquery: buildings_uranium_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_uranium)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 18 
            end
            
              
            it "should run gquery: buildings_coal_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_coal)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 10 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 75 
            end
            
              
            it "should run gquery: buildings_lignite_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_lignite)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: buildings_waste_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_waste)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 17 
            end
            
              
            it "should run gquery: buildings_greengas_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_greengas)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 2 
            end
            
              
            it "should run gquery: buildings_non_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 53 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 7 
            end
            
              
            it "should run gquery: buildings_imported_e_primary_demand" do
              r = Current.gql.query("DIVIDE(SUM(V(INTERSECTION(SECTOR(buildings),G(final_demand_cbs));primary_demand_of_imported_electricity)),BILLIONS)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 13 
            end
            
              
            it "should run gquery: insulation_costs" do
              r = Current.gql.query("SUM(V(V(extra_insulation_savings_households_energetic,heating_savings_insulation_new_households_energetic,insulation_savings_buildings_energetic);demand*total_cost_per_mje))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 370076021 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: cost_daylight_control" do
              r = Current.gql.query("PRODUCT(MAX(SUM(V(daylight_control_savings_buildings_energetic;light_output_link_share),NEG(V(0.0529669))),0),V(daylight_control_savings_buildings_energetic;total_cost_per_mj*demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 5540338 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: cost_motion_detection" do
              r = Current.gql.query("PRODUCT(MAX(SUM(V(motion_detection_savings_buildings_energetic;light_output_link_share),NEG(V(0.039))),0),V(motion_detection_savings_buildings_energetic;total_cost_per_mj*demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 1127776 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: buildings_primary_demand_without_gas" do
              r = Current.gql.query("SUM(Q(buildings_biomass_primary_demand),Q(buildings_oil_primary_demand),Q(buildings_uranium_primary_demand),Q(buildings_coal_primary_demand),Q(buildings_lignite_primary_demand),Q(buildings_waste_primary_demand),Q(buildings_greengas_primary_demand),Q(buildings_non_e_primary_demand),Q(all_biofuels_buildings_primary),Q(buildings_imported_e_primary_demand))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 105 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 208 
            end
            
              
            it "should run gquery: peak_load_investment_wind_offshore" do
              r = Current.gql.query("MAX(PRODUCT(V(wind_offshore_energy;number_of_plants_future-75),1.2),0)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 4710 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: final_sustainable_steam" do
              r = Current.gql.query("SUM(INVALID_TO_ZERO(V(INTERSECTION(G(final_demand_cbs),USE(energetic));input_of_steam_hot_water*primary_demand_of_sustainable/primary_demand)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 62446452121 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 6193740905 
            end
            
              
            it "should run gquery: investment_cost_electricity_grid_total_per_year" do
              r = Current.gql.query("SUM(Q(investment_cost_lv_grid_per_year),Q(investment_cost_mv_grid_per_year),Q(investment_cost_hv_grid_per_year))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 621 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: electricity_transport_over_grid" do
              r = Current.gql.query("DIVIDE(SUM(V(Q(central_electricity_production);output_of_electricity),V(electricity_import_export_energy;demand)),3.6)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 59873032105 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 74178651085 
            end
            
              
            it "should run gquery: network_costs_meuro_per_twh_transported" do
              r = Current.gql.query("DIVIDE(SUM(AREA(annual_infrastructure_cost_electricity),Q(investment_cost_electricity_grid_total_per_year)),DIVIDE(Q(electricity_transport_over_grid),BILLIONS))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 40 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 24 
            end
            
              
              
              
              
            it "should run gquery: co2_emission" do
              r = Current.gql.query("UNIT(Q(co2_emission_total);billions)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 97 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 152 
            end
            
              
            it "should run gquery: net_energy_import" do
              r = Current.gql.query("Q(energy_dependence)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: net_electricity_import" do
              r = Current.gql.query("Q(electricity_dependence)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: total_energy_cost" do
              r = Current.gql.query("UNIT(Q(cost_total);billions)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 68 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 35 
            end
            
              
            it "should run gquery: electricity_cost" do
              r = Current.gql.query("PRODUCT(SECS_PER_HOUR,Q(avg_total_cost_for_electricity_production_per_mj))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 179 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 75 
            end
            
              
            it "should run gquery: renewable_percentage" do
              r = Current.gql.query("Q(share_of_renewable_energy)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: onshore_land" do
              r = Current.gql.query("V(wind_inland_energy;total_land_use)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 400 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 98 
            end
            
              
            it "should run gquery: onshore_coast" do
              r = Current.gql.query("V(wind_coastal_energy;total_land_use)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 200 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 19 
            end
            
              
            it "should run gquery: offshore" do
              r = Current.gql.query("V(wind_offshore_energy;total_land_use)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 800 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 14 
            end
            
              
            it "should run gquery: roofs_for_solar_panels" do
              r = Current.gql.query("V(local_solar_pv_grid_connected_energy_energetic;total_land_use)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 133 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: land_for_solar_panels" do
              r = Current.gql.query("V(solar_pv_central_production_energy_energetic;total_land_use)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 24 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: land_for_csp" do
              r = Current.gql.query("V(solar_csp_energy;total_land_use)")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
              
            it "should run gquery: not_renewable_percentage" do
              r = Current.gql.query("SUM(1,NEG(Q(share_of_renewable_energy)))")
              v = r.future_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
              v = r.present_value; (v.respond_to?(:to_i) ? v.to_i : nil).should == 0 
            end
            
          
          end
          end
        
# == Schema Information
#
# Table name: blackboxes
#
#  id          :integer(4)      not null, primary key
#  name        :string(255)
#  description :text
#  graph_id    :integer(4)
#  created_at  :datetime
#  updated_at  :datetime
#

